generate_start_pops = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_symbiotic_race
					has_valid_civic = civic_slave_race
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = { 
				last_created_species = { is_species_class = MACHINE } 
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = { 
				save_event_target_as = last_created_species 
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
						has_valid_civic = civic_symbiotic_race
						has_valid_civic = civic_slave_race
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							OR = {
								has_origin = origin_syncretic_evolution
								has_valid_civic = civic_symbiotic_race
								has_valid_civic = civic_slave_race
							}
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		every_owned_pop = {
			limit = {
				has_job = miner
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_power_drills
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				has_job = farmer
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_harvesters
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				has_job = technician
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_superconductive
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}

		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	# (Non-Purging) Necrophage: add Buildings & Districts
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}

	# Necrophage + Devouring Swarm: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}

	# Clone Army: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 730 }
	}


		# MISC: spawn Pops
	if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					has_cybernetic_creed_trait = no
					OR = {
						is_pop_category = ruler
						is_pop_category = specialist
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_cybernetic_creed_trait = no
				}
				clear_pop_category = yes
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		while = {
			count = 9
			create_pop = {
				species = owner
			}
		}
	}

	if = {
		limit = { owner = { has_valid_civic = civic_machine_cult } }
		owner = { create_built_robot_species = yes }
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_mecha_monastery
		add_building = building_robot_assembly_plant
		while = {
			limit = { num_pops < 30 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
}
