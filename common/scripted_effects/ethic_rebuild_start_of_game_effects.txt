generate_start_pops = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_cult_machine
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_symbiotic_race
					has_valid_civic = civic_slave_race
					has_valid_civic = civic_hive_bodysnatcher			# Enriad - missing secondary species from main game bug fix
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = {
				last_created_species = { is_species_class = MACHINE }
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
						has_valid_civic = civic_symbiotic_race
						has_valid_civic = civic_slave_race
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							OR = {
								has_origin = origin_syncretic_evolution
								has_valid_civic = civic_symbiotic_race
								has_valid_civic = civic_slave_race
							}
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				# create_pop = { species = last_created_species size = 6ethos = random } # No Longer Used in Stellaris 4.0
				create_pop_group = {
					size = 1200	#Vanilla is 1200
					species = last_created_species
				}
			}
			else_if = {	#Vanilla, but this is the 'else' in vanilla
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				# create_pop = { species = last_created_species size = 9ethos = random } # No Longer Used in Stellaris 4.0
				create_pop_group = {
					size = 2400	#Vanilla is 2400
					species = last_created_species
				}
			}
			else = {	#Moodded --> Conditioned to be civic_symbiotic_race or civic_slave_race
				# create_pop = { species = last_created_species size = 12ethos = random } # No Longer Used in Stellaris 4.0
				create_pop_group = {
					size = 2400	#Modded
					species = last_created_species
				}
			}
		}
		# generate_servitor_assmiliator_secondary_pops = yes # No Longer Used in Stellaris 4.0
		generate_civic_secondary_pops = yes
		make_nascent_starting_pops = yes
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		create_pop_group = {
			size = 800
			species = last_created_species
		}
		while = {
			limit = { pop_amount < 2700 }
			create_pop_group = {
				species = owner_main_species
			}
		}
		# every_owned_pop_group = {
		#	limit = {
		#		has_job_type = miner	# has_job_type -  # Not Supported in Stellaris 4.0
		#		is_robotic_species = yes
		#	}
		#	modify_species = {
		#		species = this
		#		add_trait = trait_robot_power_drills
		#		add_trait = trait_robot_bulky
		#		add_trait = trait_robot_high_maintenance
		#		add_traits_at_start_of_list = yes
		#	}
		#}
		# every_owned_pop_group = {
		#	limit = {
		#		has_job_type = farmer	# has_job_type -  # Not Supported in Stellaris 4.0
		#		is_robotic_species = yes
		#	}
		#	modify_species = {
		#		species = this
		#		add_trait = trait_robot_harvesters
		#		add_trait = trait_robot_bulky
		#		add_trait = trait_robot_high_maintenance
		#		add_traits_at_start_of_list = yes
		#	}
		#}
		# every_owned_pop_group = {
		#	limit = {
		#		has_job_type = technician	# has_job_type -  # Not Supported in Stellaris 4.0
		#		is_robotic_species = yes
		#	}
		#	modify_species = {
		#		species = this
		#		add_trait = trait_robot_superconductive
		#		add_trait = trait_robot_bulky
		#		add_trait = trait_robot_high_maintenance
		#		add_traits_at_start_of_list = yes
		#	}
		#}

		# add_building = building_robot_assembly_plant		# No Longer Used in Stellaris 4.0
		# add_district_and_planet_size_if_needed_effect = {	# No Longer Used in Stellaris 4.0
		#	district = district_generator					# No Longer Used in Stellaris 4.0
		#}
		# while = {
		#	limit = { pop_amount < 2700 }	# No Longer Used in Stellaris 4.0
		#	create_pop = {
		#		species = owner_main_species
		#		ethos = random
		#	}
		#}
	}

	# (Non-Purging) Necrophage: add Buildings & Districts # No Longer Used in Stellaris 4.0
	# if = {
	#	limit = {
	#		owner = {
	#			has_origin = origin_necrophage
	#			NOR = { # Purges them instead
	#				has_civic = civic_fanatic_purifiers
	#				has_civic = civic_hive_devouring_swarm
	#			}
	#		}
	#	}
	#	if = {
	#		limit = {
	#			owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
	#		}
	#		add_district_and_planet_size_if_needed_effect = {
	#			district = district_city
	#		}
	#	}
	#
	#	add_building = building_necrophage_elevation_chamber
	#}

	# Necrophage + Devouring Swarm: spawn Buildings	# No Longer Used in Stellaris 4.0
	# if = {
	#	limit = {
	#		owner = {
	#			has_origin = origin_necrophage
	#			has_valid_civic = civic_hive_devouring_swarm # Purges them instead
	#			is_lithoid_empire = no
	#		}
	#	}
	#	add_building = building_spawning_pool
	#}
	# if = {
	#	limit = {
	#		owner = {
	#			has_origin = origin_necrophage
	#			has_valid_civic = civic_hive_devouring_swarm
	#			is_lithoid_empire = yes
	#		}
	#	}
	#	add_district_and_planet_size_if_needed_effect = { district = district_mining }
	#}

	# Clone Army: spawn Buildings	# No Longer Used in Stellaris 4.0
	# if = {
	#	limit = {
	#		owner = {
	#			has_origin = origin_clone_army
	#		}
	#	}
	#	add_building = building_clone_army_clone_vat
	#	add_building = building_clone_army_clone_vat
	#	planet_event = { id = clones.10 days = 1095 random = 730 }
	#}


		# MISC: spawn Pops
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
				is_wilderness_empire = no
			}
		}
		while = {
			limit = { pop_amount < 3300 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { 
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_cult_machine
				}
			}
		}
		while = {
			limit = { pop_amount < 4800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = { owner = { has_origin = origin_shroud_forged } }
		while = {
			limit = { pop_amount < 1900 }
			create_pop_group = {
				species = owner_main_species
				ethos = random
			}
		}
		owner_main_species = {
			drone_conversion_new_species_effect = yes
		}
		while = {
			limit = { pop_amount < 2900 }
			create_pop_group = {
				species = event_target:secondary_main_species
				category = complex_drone
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { pop_amount < 2800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { pop_amount < 2800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			pop_amount < 600
		}

		while = {
			limit = { pop_amount < 600 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { pop_amount < 2800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			pop_amount < 1800
		}
		while = {
			limit = { pop_amount < 1800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			limit = { pop_amount < 2000 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	#if = {	#No longer in Vanilla as of 4.1
	#	limit = { # homicidal necrophages lose 1/4 of their necrophytes to fleeing
	#		owner = {
	#			has_origin = origin_necrophage
	#			is_homicidal = yes
	#		}
	#	}
	#	create_pop_group = {
	#		size = 200
	#		species = owner_main_species
	#	}
	#}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		create_pop_group = {
			size = 400
			species = owner_main_species
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop_group = {
				limit = {
					is_same_species = root.owner_main_species
				}
				kill_single_pop = yes
			}
		}
	}

	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_toxic_knights
			}
		}
		while = { # they get the habitat
			count = 11
			random_owned_pop_group = { kill_single_pop = yes }
		}
	}

	# Nascent Stage pops being generated
	make_nascent_starting_pops = yes

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop_group = { kill_single_pop = yes }
		}
		create_zombie_pop_group = {
			SIZE = 400
		}
	}

	# Civilians
	if = {
		limit = {
			owner =  {
				NOR = {
					has_origin = origin_broken_shackles
					is_wilderness_empire = yes
					is_tankbound_empire = yes
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_cult_machine
				}
			}
		}
		while = {
			count = @civilians_counter
			if = {
				limit = {
					owner = { is_gestalt = no }
				}
				create_pop_group = {
					size = @civilians_gamestart
					species = owner_main_species
					category = civilian
				}
			}
			else = {
				create_pop_group = {
					size = @civilians_gamestart
					species = owner_main_species
					category = maintenance_drone
				}
			}
		}
	}

	# Wilderness
	if = {
		limit = {
			owner = { is_wilderness_empire = yes }
		}
		while = {
			limit = { pop_amount < 2000 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}

	# Augmentation Bazaars: add 1 of 3 cyborg trait to species
	if = {
		limit = {
			owner = {
				has_valid_civic = civic_augmentation_bazaars
			}
		}
		owner = {
			random_list = {
				30 = {
					every_owned_species = {
						limit = {
							is_robotic = no
						}
						change_species_characteristics = {
							add_trait = trait_cyborg_power_drills
						}
					}
					set_country_flag = augmentation_bazaars_power_drills
				}
				30 = {
					every_owned_species = {
						limit = {
							is_robotic = no
						}
						change_species_characteristics = {
							add_trait = trait_cyborg_harvesters
						}
					}
					set_country_flag = augmentation_bazaars_harvesters
				}
				30 = {
					every_owned_species = {
						limit = {
							is_robotic = no
						}
						change_species_characteristics = {
							add_trait = trait_cyborg_superconductive
						}
					}
					set_country_flag = augmentation_bazaars_superconductive
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop_group = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			weighted_random_owned_pop_group = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	# Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		create_pop_group = {
			size = 900
			species = owner_main_species
		}
	}

	# Machine Cult: spawn robot Pops; add Job-specific Traits;
	if = {
		limit = {
			owner = { has_civic = civic_machine_cult }
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
				add_trait = trait_latent_psionic_machine
			}
		}
		create_pop_group = {
			size = 400
			species = last_created_species
		}
	}
}

generate_civic_secondary_pops = {
	# Ensuring that this country flag has been set by this point
	if = {
		limit = {
			owner = {
				OR = {
					last_created_species = { is_lithoid = yes }
					last_created_species = { has_trait = trait_machine_unit }
				}
			}
		}
		owner = {
			set_country_flag = lithoid_subspecies
		}
	}
	else = {
		owner = {
			set_country_flag = non_lithoid_subspecies
		}
	}
	# Rogue Servitor & Driven Assimilator setting up pop special traits to make sure that their secondary species have all the cool traits. Spawning of the pops happens next.
	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_cult_machine
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_servitor
				}
				OR = {
					has_origin = origin_void_machines
					has_origin = origin_post_apocalyptic_machines
					has_origin = origin_subterranean_machines
				}
			}
		}
		owner = {
			switch = {
				trigger = has_origin
				origin_void_machines = {
					last_created_species = {
						modify_species = {
							species = this
							add_trait = trait_void_dweller_1
							add_traits_at_start_of_list = yes
							ideal_planet_class = pc_habitat
						}
					}
				}
				origin_post_apocalyptic_machines = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_survivor
							add_traits_at_start_of_list = yes
						}
					}
				}
				origin_subterranean_machines = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_cave_dweller
							add_traits_at_start_of_list = yes
						}
					}
				}
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				has_valid_civic = civic_hive_bodysnatcher
				OR = {
					has_origin = origin_void_dwellers
					has_origin = origin_post_apocalyptic
					has_origin = origin_subterranean
					has_origin = origin_wilderness
				}
			}
		}
		owner = {
			switch = {
				trigger = has_origin
				origin_void_dwellers = {
					last_created_species = {
						modify_species = {
							species = this
							add_trait = trait_void_dweller_1
							add_traits_at_start_of_list = yes
							ideal_planet_class = pc_habitat
						}
					}
				}
				origin_post_apocalyptic = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_survivor
							add_traits_at_start_of_list = yes
						}
					}
				}
				origin_subterranean = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_cave_dweller
							add_traits_at_start_of_list = yes
						}
					}
				}
				origin_wilderness = {
					last_created_species = {
						change_species_characteristics = {
							add_trait = trait_wilderness
							add_traits_at_start_of_list = yes
						}
					}
				}
			}
		}
	}
	# Rogue Servitor: set citizenship, living standard & preference; spawn Pops
	if = {
		limit = {
			owner = { 
				OR = {
					has_valid_civic = civic_machine_servitor 
					has_valid_civic = civic_machine_cult_machine 
				}
			}
		}
		last_created_species = {
			if = {
				limit = {
					root = {
						OR = {
							is_planet_class = pc_shattered_ring_habitable
							is_planet_class = pc_gaia
						}
					}
				}
				modify_species = {
					species = this
					ideal_planet_class = home_planet
				}
			}
			if = {
				limit = { owner = { has_valid_civic = civic_machine_servitor  } }
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			else = {
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
		}
		while = {
			count = @civilians_counter
			create_pop_group = {
				size = @civilians_gamestart
				species = last_created_species
			}
		}
	}

	# Driven Assimilator and Bodysnatcher set citizenship, living standard & preference; spawn Pops
	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_hive_bodysnatcher
				}
			}
		}
		last_created_species = {
			if = {
				limit = {
					root = {
						OR = {
							is_planet_class = pc_shattered_ring_habitable
							is_planet_class = pc_gaia
						}
					}
				}
				modify_species = {
					species = this
					ideal_planet_class = home_planet
				}
			}
			if = {
				limit = {
					root.owner = { is_machine_empire = yes }
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
			}
			else = {
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
				}
			}

			set_living_standard = {
				country = root.owner
				type = living_standard_hive_mind
			}
		}
		create_pop_group = {
			size = 1000
			species = last_created_species
		}
	}
}
