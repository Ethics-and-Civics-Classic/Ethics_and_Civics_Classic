# This file contains presets that are selectable when proposing an Agreement.
# The terms of the preset are defined as key/value pairs.
# Would be nice to make scripting of the key/value pairs less verbose, but that requires some more work with serialization.

# Example:
#
# name_of_preset = {
# 	term_data = {
# 		discrete_terms = {						# The default discrete terms of this preset
# 			{
# 				key = name_of_term				# The term name, as defined in agreement_terms
# 				value = name_of_term_value		# The term value to use, as defined in agreement_term_values
# 			}
# 			{
# 				key = name_of_other_term
# 				value = name_of_other_term_value
# 			}
# 		}
#		resource_terms = {
#			{
#				key = name_of_resource_term_value # The resource term value to use, as defined in agreement_term_values
#				value = <number>				# subsidy percentage
#			}
#		}
# 	}
#	hidden = no 								# This preset will be hidden from UI but the AI will be able to use it.
#	should_ai_use_for_proposals = yes			# The ai will skip this when trying to find best/preffered agreement preset to negotiate existing or propose new agreement.
# }

@protectorate_tech_threshold = 0.4
@protectorate_tech_switch = 0.5

@specialist_base_acceptance_value = 50
@specialist_subject_base_acceptance_value = 50
@specialist_aligned_ethics_value = 50
@specialist_unaligned_ethics_value = -50

preset_franchisee = {
	icon = "GFX_diplomacy_status_is_subsidiary"
	term_data = {
		discrete_terms = {
			{
				key = specialist_type
				value = specialist_none
			}
			{
				key = subject_integration
				value = subject_can_be_integrated
			}
			{
				key = subject_diplomacy
				value = subject_can_do_diplomacy_but_not_vote
			}
			{
				key = subject_expand
				value = subject_can_expand_with_tithe
			}
			{
				key = joins_overlord_wars
				value = joins_overlord_wars_all
			}
			{
				key = joins_subject_wars
				value = joins_subject_wars_defensive
			}
			{
				key = subject_holdings_limit
				value = subject_holdings_limit_2
			}
			{
				key = subject_loyalty
				value = subject_loyalty_effects
			}
			{
				key = protectorate
				value = subject_is_not_protectorate
			}
		}
		resource_terms = {
			{
				key = resource_subsidies_basic
				value = 0.3
			}
		}
	}

	overlord_weight = {
		base = 1000
	}

	subject_weight = {
		base = 50
	}

	potential = {
		from = { has_policy_flag = franchising_terms }
		#tech_unlocked_ratio = {
		#	who = from
		#	ratio >= @protectorate_tech_threshold
		#}
	}
}

preset_relic_satrapy = {
	icon = "GFX_diplomacy_status_is_satrapy"
	term_data = {
		discrete_terms = {
			{
				key = specialist_type
				value = specialist_none
			}
			{
				key = subject_integration
				value = subject_can_not_be_integrated
			}
			{
				key = subject_diplomacy
				value = subject_can_do_diplomacy
			}
			{
				key = subject_expand
				value = subject_can_expand
			}
			{
				key = joins_overlord_wars
				value = joins_overlord_wars_all
			}
			{
				key = joins_subject_wars
				value = joins_subject_wars_none
			}
			{
				key = subject_holdings_limit
				value = subject_holdings_limit_1
			}
			{
				key = naval_capacity
				value = naval_cap_relic_satrapy
			}
			{
				key = subject_loyalty
				value = subject_loyalty_effects
			}
			{
				key = protectorate
				value = subject_is_not_protectorate
			}
		}
		resource_terms = {
			{
				key = resource_subsidies_basic
				value = 0.3
			}
		}
	}
	potential = {
		from = {
			OR = {
				has_relic = r_khans_throne
				has_valid_civic = civic_barbaric_despoilers
				has_valid_civic = civic_barbaric_despoilers_corporate
			}
		}
	}
}
