namespace = EaC_civic_mechanic_events
namespace = enclave
namespace = crime
namespace = action
namespace = leader
namespace = paragon_2

# Remove Imperial Heir trait on changing away from Imperial authority.
country_event = {
	id = action.502
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_owned_leader = {
			has_trait = trait_imperial_heir
		}
		NOT = {
			is_imperial_authority = yes
		}
	}

	immediate = {
		every_owned_leader = {
			limit = {
				has_trait = trait_imperial_heir
			}
			remove_trait = trait_imperial_heir

			# Treasure Hunters origin - Adds the Adventurous Spirit trait
			if = {
				limit = {
					root = { 
						OR = {
							has_origin = origin_treasure_hunters
							has_civic = civic_military_dictatorship_corporate	# Modded
						}
					}
				}
				add_trait = {
					trait = leader_trait_adventurous_spirit_3
					show_message = no
				}
			}
		}
	}
}


############################
#
# On destroying enemy ship.
#
############################
country_event = {
	id = paragon_2.1005
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROMFROM = { # Winning ship.
			if = {
				limit = { exists = fleet.leader }
				fleet.leader = {

					# Corsair / Corsair II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_corsair
								has_trait = leader_trait_corsair_2
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}
						if = {
							limit = { has_trait = leader_trait_corsair }
							ROOT = { # Owner of winning ship.
								add_resource = {
									energy = @trait_corsair_amt
									mult = value:hells_heart_effect
								}
							}
						}
						else = {
							ROOT = { # Owner of winning ship.
								add_resource = {
									energy = @trait_corsair_2_amt
									mult = value:hells_heart_effect
								}
							}
						}
					}
					
					# Warrior Culture / Warrior Culture II
					if = {
						limit = {
							has_trait_tier1or2 = {
								TRAIT = leader_trait_warrior_culture
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}

						ROOT = {
							if = {
								limit = { PREV = { has_trait = leader_trait_warrior_culture } }
								add_resource = {
									consumer_goods = @trait_warrior_culture_fleet_amt
								}
							}
							else = {
								add_resource = {
									consumer_goods = @trait_warrior_culture_2_fleet_amt
								}
							}
						}
					}

					# Crusader / Crusader II
					if = {
						limit = {
							has_trait_tier1or2 = {
								TRAIT = leader_trait_crusader
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}

						ROOT = {
							if = {
								limit = { PREV = { has_trait = leader_trait_crusader } }
								add_resource = {
									unity = @trait_crusader_fleet_amt
								}
							}
							else = {
								add_resource = {
									unity = @trait_crusader_2_fleet_amt
								}
							}
						}
					}

					# Shipbreaker / Shipbreaker II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_shipbreaker
								has_trait = leader_trait_shipbreaker_2
							}
							ROOT.FROM = { # Owner of losing fleet.
								is_default_or_fallen = yes
							}
						}
						if = {
							limit = { has_trait = leader_trait_shipbreaker }
							ROOT = {
								add_resource = {
									alloys = @trait_shipbreaker_amt
									mult = value:hells_heart_effect
								}
							}
						}
						else = {
							ROOT = {
								add_resource = {
									alloys = @trait_shipbreaker_2_amt
									mult = value:hells_heart_effect
								}
							}
						}
					}

					# Juryrigger / Juryrigger II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_juryrigger
								has_trait = leader_trait_juryrigger_2
							}
						}
						ROOT.FROMFROM = {
							if = {
								limit = { PREV = { has_trait = leader_trait_juryrigger } }
								repair_percentage = @trait_juryrigger_amt
							}
							else = {
								repair_percentage = @trait_juryrigger_2_amt
							}
						}
					}
				}
			}
		}
	}
}

############################
#
# On army killed in combat.
#
############################
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
country_event = {
	id = paragon_2.1040
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROMFROMFROM = { # Planet where ground combat is taking place.

			# Check if dead army is a defensive army.
			if = {
				limit = {
					any_ground_combat_defender = {
						is_same_value = ROOT.FROM
					}
				}

				# Check if attacking army has general with Crusader trait.
				random_ground_combat_attacker = {
					limit = {
						exists = leader
						leader = {
							OR = {
								has_trait = leader_trait_warrior_culture
								has_trait = leader_trait_warrior_culture_2
								has_trait = leader_trait_crusader
								has_trait = leader_trait_crusader_2
							}
						}
					}
					leader = {
						save_event_target_as = attacking_general
					}
				}
			}
		}

		# If attacking army has a leader with Crusader trait, award Unity.
		if = {
			limit = { exists = event_target:attacking_general }
			FROMFROM = {
				if = {
					limit = {
						event_target:attacking_general = {
							has_trait = leader_trait_crusader
						}
					}
					add_resource = {
						unity = 40 # Tier 1
					}
				}
				if = {
					limit = {
						event_target:attacking_general = {
							has_trait = leader_trait_crusader_2
						}
					}
					add_resource = {
						unity = 60 # Tier 2
					}
				}
				if = {
					limit = {
						event_target:attacking_general = {
							has_trait = leader_trait_crusader
						}
					}
					add_resource = {
						consumer_goods = 30 # Tier 1
					}
				}
				if = {
					limit = {
						event_target:attacking_general = {
							has_trait = leader_trait_crusader_2
						}
					}
					add_resource = {
						consumer_goods = 50 # Tier 2
					}
				}
			}
		}
	}
}

############################
#
# Leader Events
#
############################

# Fired by on_added_to_leader_pool
# A leader is added to the leader pool, available for recruitment
# scope: country, from: leader
# Add traits from civics and origins
country_event = {
	id = leader.100
	hide_window = yes

	is_triggered_only = yes


	trigger = {
		NOT = { has_country_flag = spawning_renowned_leader }
	}

	immediate = {

		# Champions of the Empire
		# Adds a random common trait
		if = {
			limit = {
				has_tradition = tr_aptitude_champions_of_the_empire
			}
			from = {
				add_trait = {
					trait = random_common
					show_message = no
				}
			}
		}

		# Optimized Neurology
		# Adds a random common trait
		if = {
			limit = {
				has_country_flag = genetic_ascension_stage_1_purity
				has_genetic_stage_1_tradition = yes
			}
			from = {
				add_trait = {
					trait = random_common
					show_message = no
				}
			}
		}

		# Aristocratic Elite
		# 20% Chance for a random positive trait and a random negative trait
		if = {
			limit = {
				has_valid_civic = civic_aristocratic_elite
			}
			from = {
				random_list = {
					80 = {  }
					20 = {
						add_trait = {
							trait = random_common
							show_message = no
						}
						add_trait = {
							trait = random_negative
							show_message = no
						}
						# Variable "leader_pending_negative_traits_unmodified" doesn't exist yet, can't reduce it yet. Check made in paragon_2.2200.
						change_background_job = noble
					}
				}
			}
		}

		# Technocracy
		# Adds a random expertise trait
		if = {
			limit = {
				OR = {
					has_valid_civic = civic_technocracy
					has_valid_civic = civic_cyber_dictatorship	
					has_valid_civic = civic_science_directorate	
					has_valid_civic = civic_cyber_demos_cratos
				}
				from = { leader_class = scientist }
			}
			from = {
				add_random_expertise_trait_effect = yes
			}
		}
		
		# Warrior Culture
		# Adds the Warrior Culture trait
		if = {
			limit = {
				has_valid_civic = civic_warrior_culture
				from = { leader_class = commander }
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_warrior_culture
				}
			}
		}

		# Crusader Spirit
		# Adds the Crusader trait
		if = {
			limit = {
				has_valid_civic = civic_crusader_spirit
				from = { leader_class = commander }
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_crusader
				}
			}
		}

		# Letters of Marque
		# Adds the Corsair trait
		if = {
			limit = {
				has_civic = civic_crusader_spirit_corporate
				from = { leader_class = commander }
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_corsair
				}
			}
		}
		# Pirate Leadership - Random Pirate Trait
		if = {
			limit = {
				has_technology = tech_pirate_leaders
			}
			from = {
				random_list = { 
					34 = { 
						give_trait_no_notify_ignore_autocracy_restriction = {
							TRAIT = leader_trait_buccaneer
						} 
					} 
					33 = { 
						give_trait_no_notify_ignore_autocracy_restriction = {
							TRAIT = leader_trait_trailblazer
						}
					} 
					33 = { 
						give_trait_no_notify_ignore_autocracy_restriction = {
							TRAIT = leader_trait_treasure_hoarder
						}
					}
				}
			}
		}

		# Tactical Algorithms
		# Adds the Tactical Algorithms trait
		if = {
			limit = {
				has_civic = civic_machine_tactical_algorithms
				from = { leader_class = commander }
			}
			from = {
				add_trait = {
					trait = leader_trait_tactical_algorithms
					show_message = no
				}
			}
		}

		# Storm Chasers
		# Adds the Storm Rider trait
		if = {
			limit = {
				has_origin = origin_storm_chasers
			}
			from = {
				switch = {
					trigger = leader_class
					commander = {
						add_trait = {
							trait = leader_trait_storm_rider_commander
							show_message = no
						}
					}
					scientist = {
						add_trait = {
							trait = leader_trait_storm_rider_scientist
							show_message = no
						}
					}
					official = {
						add_trait = {
							trait = leader_trait_storm_rider_official
							show_message = no
						}
					}
				}
			}
		}

		# Treasure Hunters
		# Adds the Adventurous Spirit trait
		if = {
			limit = {
				OR = {
					has_origin = origin_treasure_hunters
					has_civic = civic_military_dictatorship_corporate	# Modded
				}
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_adventurous_spirit_3
				}
			}
		}

		# Biochemical Composure/Cloning Authorities
		if = {
			limit = {
				from = {
					leader_can_have_backup_clone = yes
				}
			}
			from = {
				random_list = {
					75 = {
						# Base 75% chance of nothing
						modifier = {
							factor = 0
							root = {
								is_cloning_authority = yes
								has_cloning_biochemical_composure_tradition = yes
							}
						}
					}
					25 = {
						add_trait = {
							trait = leader_trait_has_backup_clone
							show_message = no
						}
					}
				}
			}
		}

		# Genetic Purity Authorities
		if = {
			limit = {
				is_purity_authority = yes
				is_imperial_authority = no
				is_hive_empire = no
				is_megacorp = no
				from = {
					species = {
						is_robotic_species = no
					}
				}
			}
			from = {
				add_trait = {
					trait = trait_leader_genetic_purist
				}
			}
		}

		# Biotic Dominion
		if = {
			limit = {
				is_purity_authority = yes
				is_imperial_authority = yes
				from = {
					is_same_species = root.ruler
				}
			}
			from = {
				add_trait = {
					trait = trait_imperial_heir
					show_message = no
				}
			}
		}

		# Unplugged
		# Adds Cybernetic Benefits Trait
		if = {
			limit = {
				has_origin = origin_unplugged
				from = {
					leader_class = commander
					species = {
						is_same_value = prevprev.owner_main_species
					}
				}
			}

			owner_main_species = {
				switch = {
					trigger = has_trait
					trait_unplugged_cybernetic_positives_3 = {
						prev.from = {
							add_trait = {
								trait = leader_trait_unplugged_cybernetic_positives_3
								show_message = no
							}
						}
					}
					trait_unplugged_cybernetic_positives_2 = {
						prev.from = {
							add_trait = {
								trait = leader_trait_unplugged_cybernetic_positives_2
								show_message = no
							}
						}
					}
					trait_unplugged_cybernetic_positives_1 = {
						prev.from = {
							add_trait = {
								trait = leader_trait_unplugged_cybernetic_positives_1
								show_message = no
							}
						}
					}
				}
			}
		}
		# Entropy Drinkers
		# Adds the Psionic trait
		if = {
			limit = { is_entropy_drinkers_empire = yes }
			from = {
				add_trait = {
					trait = leader_trait_psionic
					show_message = no
				}
			}
		}

		if = {
			limit = {
				has_shroud_dlc = yes
				is_oligarchic_authority = yes
				is_corporeal_authority = yes
			}
			from = {
				add_trait = {
					trait = random_negative
					show_message = no
				}
			}
		}

		if = {
			limit = {
				has_shroud_dlc = yes
				is_superstitious_beliefs_empire = yes
			}
			if = {
				limit = {
					has_cycle_of_fortune = yes
				}
				from = {
					add_trait = {
						trait = random_common
						show_message = no
					}
				}
			}
			if = {
				limit = {
					has_cycle_of_omens = yes
				}
				from = {
					add_trait = {
						trait = random_negative
						show_message = no
					}
				}
			}
		}
	}
}

# Fired by on_game_start_country
# scope: country
# Add traits from civics and origins
country_event = {
	id = leader.110
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		# Aristocratic Elite
		# 20% Chance for a random positive trait and a random negative trait
		if = {
			limit = {
				has_valid_civic = civic_aristocratic_elite
			}
			every_owned_leader = {
				random_list = {
					80 = {  }
					20 = {
						add_trait = {
							trait = random_common
							show_message = no
						}
						add_trait = {
							trait = random_negative
							show_message = no
						}
						# Variable "leader_pending_negative_traits_unmodified" doesn't exist yet, can't reduce it yet. Check made in paragon_2.2200.
						change_background_job = noble
					}
				}
			}
		}

		# Remnants
		# Adds a Archaeostudies Expertise trait
		if = {
			limit = {
				has_ancrel = yes
				has_origin = origin_remnants
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					OR = {
						is_councilor_type = councilor_research
						is_councilor_type = councilor_gestalt_cognitive
					}
				}
				add_trait = {
					trait = leader_trait_expertise_archaeostudies
					show_message = no
				}
			}
		}

		# Static Research Analysis
		# Adds a random Expertise trait
		if = {
			limit = {
				is_machine_empire = yes
				has_valid_civic = civic_machine_predictive_analysis
			}
			every_owned_leader = {
				limit = {
					is_councilor_type = councilor_gestalt_cognitive
				}
				add_random_expertise_trait_effect = yes
			}
		}

		# Technocracy
		# Adds a random Expertise trait
		if = {
			limit = {
				OR = {
					has_valid_civic = civic_technocracy
					has_valid_civic = civic_cyber_dictatorship	
					has_valid_civic = civic_science_directorate	
					has_valid_civic = civic_cyber_demos_cratos
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
				}
				add_random_expertise_trait_effect = yes
			}
		}
		
		# Warrior Culture
		# Adds the Warrior Culture trait
		if = {
			limit = {
				has_valid_civic = civic_warrior_culture
			}
			every_owned_leader = {
				limit = {
					leader_class = commander
				}
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_warrior_culture
				}
			}
		}

		# Crusader Spirit
		# Adds the Crusader trait
		if = {
			limit = {
				has_valid_civic = civic_crusader_spirit
			}
			every_owned_leader = {
				limit = {
					leader_class = commander
				}
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_crusader
				}
			}
		}

		# Letters of Marque
		# Adds the Corsair trait
		if = {
			limit = { has_civic = civic_crusader_spirit_corporate }
			every_owned_leader = {
				limit = {
					leader_class = commander
				}
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_corsair
				}
			}
		}
		# Pirate Leadership - Random Pirate Trait
		if = {
			limit = {
				has_technology = tech_pirate_leaders
			}
			every_owned_leader = {
				random_list = { 
					34 = { 
						give_trait_no_notify_ignore_autocracy_restriction = {
							TRAIT = leader_trait_buccaneer
						} 
					} 
					33 = { 
						give_trait_no_notify_ignore_autocracy_restriction = {
							TRAIT = leader_trait_trailblazer
						}
					} 
					33 = { 
						give_trait_no_notify_ignore_autocracy_restriction = {
							TRAIT = leader_trait_treasure_hoarder
						}
					}
				}
			}
		}

		# Tactical Algorithms
		# Adds the Tactical Algorithms trait
		if = {
			limit = {
				has_civic = civic_machine_tactical_algorithms
			}
			every_owned_leader = {
				limit = {
					leader_class = commander
				}
				add_trait = {
					trait = leader_trait_tactical_algorithms
					show_message = no
				}
			}
		}

		# Storm Chasers
		# Adds the Storm Rider trait
		if = {
			limit = {
				has_origin = origin_storm_chasers
			}
			every_owned_leader = {
				switch = {
					trigger = leader_class
					commander = {
						add_trait = {
							trait = leader_trait_storm_rider_commander
							show_message = no
						}
					}
					scientist = {
						add_trait = {
							trait = leader_trait_storm_rider_scientist
							show_message = no
						}
					}
					official = {
						add_trait = {
							trait = leader_trait_storm_rider_official
							show_message = no
						}
					}
				}
			}
		}

		# Treasure Hunters
		# Adds the Adventurous Spirit trait
		if = {
			limit = {
				OR = {
					has_origin = origin_treasure_hunters
					has_civic = civic_military_dictatorship_corporate	# Modded
				}
			}
			every_owned_leader = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_adventurous_spirit_3
				}
			}
		}

		# Entropy Drinkers
		# Adds the Psionic trait
		if = {
			limit = {
				is_entropy_drinkers_empire = yes
			}
			every_owned_leader = {
				limit = {
					NOT = { leader_class = envoy }
					is_gestalt_node = no
				}
				add_trait = {
					trait = leader_trait_psionic
					show_message = no
				}
			}
		}
	}
}

# New heir appointed
leader_event = {
	id = leader.200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
	}

	immediate = {
		# Set age to be younger than normal.
		set_variable_to_random_value = {
			which = heir_age_mod
			min = -10
			max = 0
			rounded = yes
		}
		add_age = heir_age_mod

		####################
		# CLASS RANDOMISER #
		####################

		# Set skill level to 1
		set_skill = 1
		# Add generic level modifiers
		add_skill_without_trait_selection = owner.modifier:leader_initial_skill

		if = {
			limit = {
				owner = {
					OR = {
						# Commander
						has_valid_civic = civic_crusader_spirit_corporate
						has_technology = tech_pirate_leaders
						has_tradition = tr_supremacy_war_games
						has_valid_civic = civic_distinguished_admiralty
						has_valid_civic = civic_crusader_spirit
						has_valid_civic = civic_warrior_culture
						# Official
						has_valid_civic = civic_aristocratic_elite
						has_tradition = tr_domination_colonial_viceroys
						# Scientist
						has_valid_civic = civic_technocracy
						has_tradition = tr_discovery_science_division
						# Current Ruler's Class
						has_valid_civic = civic_philosopher_king
					}
				}
			}

			# All classes have a base weight of 10.
			# Civics that boost only one class add 40.
			# Civics that boost two classes add 20 to each class.
			# Traditions that boost a class add 20.

			random_list = {
				# Commander
				0 = {
					modifier = {
						add = value:heir_class_weight_commander
					}
					change_leader_class = commander
					add_skill_without_trait_selection = owner.modifier:commander_initial_skill
				}
				# Official
				0 = {
					modifier = {
						add = value:heir_class_weight_official
					}
					change_leader_class = official
					add_skill_without_trait_selection = owner.modifier:official_initial_skill
				}
				# Scientist
				0 = {
					modifier = {
						add = value:heir_class_weight_scientist
					}
					change_leader_class = scientist
					add_skill_without_trait_selection = owner.modifier:scientist_initial_skill
				}
			}
		}

		##########
		# TRAITS #
		##########

		# Initial Traits, set after determining class.
		add_trait = {
			trait = trait_imperial_heir
			show_message = no
		}
		add_trait = {
			trait = random_common
			show_message = no
		}

		# Chance for a negative trait.
		random_list = {
			95 = { }
			5 = {
				add_trait = {
					trait = random_common
					show_message = no
				}
				add_trait = {
					trait = random_negative
					show_message = no
				}
				# Variable "leader_pending_negative_traits_unmodified" doesn't exist yet, can't reduce it yet. Checked now made in paragon_2.2200.
				modifier = {
					factor = 0
					owner = { has_valid_civic = civic_philosopher_king }
				}
			}
		}

		# Champions of the Empire
		# Adds a random common trait
		if = {
			limit = {
				owner = {
					has_tradition = tr_aptitude_champions_of_the_empire
				}
			}
			add_trait = {
				trait = random_common
				show_message = no
			}
		}

		# Optimized Neurology
		# Adds a random common trait
		if = {
			limit = {
				owner = {
					has_country_flag = genetic_ascension_stage_1_purity
					has_genetic_stage_1_tradition = yes
				}
			}
			add_trait = {
				trait = random_common
			}
		}

		# Under One Rule
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_legendary_leader_imperial
						ruler = { has_trait = leader_trait_legendary_offspring }
					}
				}
			}
			add_trait = {
				trait = leader_trait_legendary_offspring
				show_message = no
			}
		}

		# Technocracy
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_technocracy
						has_valid_civic = civic_cyber_dictatorship	
						has_valid_civic = civic_science_directorate	
						has_valid_civic = civic_cyber_demos_cratos
					}
				}
				leader_class = scientist
			}
			add_random_expertise_trait_effect = yes
		}
		# Warrior Culture
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_warrior_culture
				}
				leader_class = commander
			}
			give_trait_no_notify_ignore_autocracy_restriction = {
				TRAIT = leader_trait_warrior_culture
			}
		}
		
		# Crusader Spirit
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_crusader_spirit
				}
				leader_class = commander
			}
			give_trait_no_notify_ignore_autocracy_restriction = {
				TRAIT = leader_trait_crusader
			}
		}

		# Letters of Marque
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_crusader_spirit_corporate
				}
				leader_class = commander
			}
			give_trait_no_notify_ignore_autocracy_restriction = {
				TRAIT = leader_trait_corsair
			}
		}
		# Pirate Leadership - Random Pirate Trait
		if = {
			limit = {
				owner = {
					has_technology = tech_pirate_leaders
				}
			}
			random_list = { 
				34 = { 
					give_trait_no_notify_ignore_autocracy_restriction = {
						TRAIT = leader_trait_buccaneer
					} 
				} 
				33 = { 
					give_trait_no_notify_ignore_autocracy_restriction = {
						TRAIT = leader_trait_trailblazer
					}
				} 
				33 = { 
					give_trait_no_notify_ignore_autocracy_restriction = {
						TRAIT = leader_trait_treasure_hoarder
					}
				}
			}
		}

		# Storm Chasers
		# Adds the Storm Rider trait
		if = {
			limit = {
				owner = {
					has_origin = origin_storm_chasers
				}
			}
			switch = {
				trigger = leader_class
				commander = {
					add_trait = {
						trait = leader_trait_storm_rider_commander
						show_message = no
					}
				}
				scientist = {
					add_trait = {
						trait = leader_trait_storm_rider_scientist
						show_message = no
					}
				}
				official = {
					add_trait = {
						trait = leader_trait_storm_rider_official
						show_message = no
					}
				}
			}
		}

		# Treasure Hunters
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_treasure_hunters
						has_civic = civic_military_dictatorship_corporate	# Modded
					}
				}
			}
			give_trait_no_notify_ignore_autocracy_restriction = {
				TRAIT = leader_trait_adventurous_spirit_3
			}
		}

		# Entropy Drinkers
		if = {
			limit = {
				owner = {
					is_entropy_drinkers_empire = yes
				}
			}
			give_trait_no_notify_ignore_autocracy_restriction = {
				TRAIT = leader_trait_psionic
			}
		}

		# Biochemical Composure/Cloning Authorities
		if = {
			limit = {
				leader_can_have_backup_clone = yes
			}
			random_list = {
				75 = {
					# Base 75% chance of nothing
					modifier = {
						factor = 0
						root = {
							is_cloning_authority = yes
							has_cloning_biochemical_composure_tradition = yes
						}
					}
				}
				25 = {
					add_trait = {
						trait = leader_trait_has_backup_clone
						show_message = no
					}
				}
			}
		}
	}
}

# Modder Note:
# This file is where civic mechanic events are placed. Please only use EaC_civic_mechanic_events namespace, as adding multiple namespaces is very laggy.

# 0.100 - Memory Vault Civic + Memoralist - Gives random leader trait to elected council leader. Can pay influence to make it a specific destiny trait.
country_event = {
	id = EaC_civic_mechanic_events.100
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = no

	trigger = {
		if = {
			limit = { is_memory_vault_empire = yes }
			any_planet_within_border = { has_building = building_paragon_memory_vaults }
		}
		else = { always = no }
	}
	immediate = {
		RULER = {
			if = {
				limit = { has_base_skill = 1 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 1
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 2 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 2
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 3 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 3
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 4 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 4
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 5 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 5
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 6 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 6
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 7 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 7
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 8 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 8
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 9 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 9
					}
				}
			}
			else = {
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 10
					}
				}
			}
		}
	}
}

# Allows imperial authority's ruler to pass skill level to the heir
country_event = {
	id = EaC_civic_mechanic_events.101
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = no

	trigger = {
		if = {
			limit = { is_memory_vault_empire = yes }
			any_planet_within_border = { has_building = building_paragon_memory_vaults }
		}
		else = { always = no }
		is_imperial_authority = yes
		from = { from = { is_same_value = root.RULER } }
	}
	immediate = {
		RULER = {
			if = {
				limit = { has_base_skill = 1 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 1
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 2 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 2
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 3 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 3
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 4 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 4
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 5 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 5
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 6 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 6
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 7 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 7
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 8 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 8
					}
				}
			}
			else_if = {
				limit = { has_base_skill = 9 }
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 9
					}
				}
			}
			else = {
				root = {
					set_variable = {
						which = ruler_ancestor_level # Must be directly referring to a variable
						value = 10
					}
				}
			}
		}
	}
}

# Allows imperial authority's ruler to pass skill level to the heir
leader_event = {
	id = EaC_civic_mechanic_events.102
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = no

	trigger = {
		owner = {
			if = {
				limit = { is_memory_vault_empire = yes }
				any_planet_within_border = { has_building = building_paragon_memory_vaults }
			}
			else = { always = no }
		}
	}
	immediate = {
		owner = { country_event = { id = EaC_civic_mechanic_events.103 days = 16 } }
	}
}

# This is a SUPER EVENT which enables the effects
country_event = {
	id = EaC_civic_mechanic_events.103
	picture = GFX_evt_astral_rift_library
	show_sound = evn_ove_grand_speech
	hide_window = no
	is_triggered_only = yes
	fire_only_once = no

	# location = Capital

	trigger = {
		if = {
			limit = { is_memory_vault_empire = yes }
			any_planet_within_border = { has_building = building_paragon_memory_vaults }
		}
		else_if = {
			limit = { has_civic = civic_heroic_tales }
			always = yes
		}
		else = { always = no }
	}
	title = EaC_civic_mechanic_events.103.title.other
	##########################
	# Vault of Knowledge Civic#
	##########################
	# Displays proper TITLE based on authority and leader type
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		OR = {
	#			has_authority = auth_direct_democratic
	#			is_democratic_authority = yes
	#		}
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_elected"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_oligarchic_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_elected_20"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = no
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_dictatorial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_dictator"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = yes
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_dictatorial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_dictator_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = no
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_imperial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_imperial"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = yes
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_imperial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_imperial_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_hive_empire = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_hive_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_megacorp = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_megacorp"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = official } }
	#		is_memory_vault_empire = yes
	#		is_machine_empire = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.official_machine_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		OR = {
	#			has_authority = auth_direct_democratic
	#			is_democratic_authority = yes
	#		}
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_elected"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_oligarchic_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_elected_20"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = no
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_dictatorial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_dictator"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = yes
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_dictatorial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_dictator_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = no
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_imperial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_imperial"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = yes
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_imperial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_imperial_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_hive_empire = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_hive_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_megacorp = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_megacorp"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = commander } }
	#		is_memory_vault_empire = yes
	#		is_machine_empire = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.commander_machine_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		OR = {
	#			has_authority = auth_direct_democratic
	#			is_democratic_authority = yes
	#		}
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_elected"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_oligarchic_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_elected_20"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = no
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_dictatorial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_dictator"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = yes
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_dictatorial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_dictator_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = no
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_imperial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_imperial"
	#}
	# title = {
	#	trigger = {
	#		is_memorialist_empire = yes
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_imperial_authority = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_imperial_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_hive_empire = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_hive_is_memorialist_empire"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_megacorp = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_megacorp"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = scientist } }
	#		is_memory_vault_empire = yes
	#		is_machine_empire = yes
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.scientist_machine_is_memorialist_empire"
	#}
	####################
	## Heroic Past Civic#
	####################
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = official } }
	#		root = { has_civic = civic_heroic_tales }
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.civic_heroic_tales.official"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = commander } }
	#		root = { has_civic = civic_heroic_tales }
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.civic_heroic_tales.commander"
	#}
	# title = {
	#	trigger = {
	#		root = { RULER = { leader_class = scientist } }
	#		root = { has_civic = civic_heroic_tales }
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.civic_heroic_tales.scientist"
	#}
	########################
	## Other / Error Message#
	########################
	# title = {
	#	trigger = {
	#		NOT = {
	#			has_authority = auth_direct_democratic
	#			is_democratic_authority = yes
	#			is_oligarchic_authority = yes
	#			is_dictatorial_authority = yes
	#			is_imperial_authority = yes
	#			is_hive_empire = yes
	#			is_megacorp = yes
	#			is_machine_empire = yes
	#		}
	#	}
	#	text = "EaC_civic_mechanic_events.103.title.other"
	#}
	###############
	# Description #
	###############
	##########################
	# Vault of Knowledge Civic#
	##########################
	# Displays proper description based on authority and leader type
	desc = {
		trigger = {
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			OR = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
			}
		}
		text = "EaC_civic_mechanic_events.103.desc.official_elected"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_oligarchic_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_elected_20"
	}
	desc = {
		trigger = {
			is_memorialist_empire = no
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_dictatorial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_dictator"
	}
	desc = {
		trigger = {
			is_memorialist_empire = yes
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_dictatorial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_dictator_is_memorialist_empire"
	}
	desc = {
		trigger = {
			is_memorialist_empire = no
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_imperial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_imperial"
	}
	desc = {
		trigger = {
			is_memorialist_empire = yes
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_imperial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_imperial_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_hive_empire = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_hive_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_megacorp = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_megacorp"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = official } }
			is_memory_vault_empire = yes
			is_machine_empire = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.official_machine_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			OR = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
			}
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_elected"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_oligarchic_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_elected_20"
	}
	desc = {
		trigger = {
			is_memorialist_empire = no
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_dictatorial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_dictator"
	}
	desc = {
		trigger = {
			is_memorialist_empire = yes
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_dictatorial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_dictator_is_memorialist_empire"
	}
	desc = {
		trigger = {
			is_memorialist_empire = no
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_imperial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_imperial"
	}
	desc = {
		trigger = {
			is_memorialist_empire = yes
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_imperial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_imperial_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_hive_empire = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_hive_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_megacorp = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_megacorp"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = commander } }
			is_memory_vault_empire = yes
			is_machine_empire = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.commander_machine_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			OR = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
			}
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_elected"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_oligarchic_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_elected_20"
	}
	desc = {
		trigger = {
			is_memorialist_empire = no
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_dictatorial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_dictator"
	}
	desc = {
		trigger = {
			is_memorialist_empire = yes
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_dictatorial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_dictator_is_memorialist_empire"
	}
	desc = {
		trigger = {
			is_memorialist_empire = no
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_imperial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_imperial"
	}
	desc = {
		trigger = {
			is_memorialist_empire = yes
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_imperial_authority = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_imperial_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_hive_empire = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_hive_is_memorialist_empire"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_megacorp = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_megacorp"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = scientist } }
			is_memory_vault_empire = yes
			is_machine_empire = yes
		}
		text = "EaC_civic_mechanic_events.103.desc.scientist_machine_is_memorialist_empire"
	}
	###################
	# Heroic Past Civic#
	###################
	desc = {
		trigger = {
			root = { RULER = { leader_class = official } }
			root = { has_civic = civic_heroic_tales }
		}
		text = "EaC_civic_mechanic_events.103.desc.civic_heroic_tales.official"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = commander } }
			root = { has_civic = civic_heroic_tales }
		}
		text = "EaC_civic_mechanic_events.103.desc.civic_heroic_tales.commander"
	}
	desc = {
		trigger = {
			root = { RULER = { leader_class = scientist } }
			root = { has_civic = civic_heroic_tales }
		}
		text = "EaC_civic_mechanic_events.103.desc.civic_heroic_tales.scientist"
	}
	#######################
	# Other / Error Message#
	#######################
	desc = {
		trigger = {
			NOT = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
				is_oligarchic_authority = yes
				is_dictatorial_authority = yes
				is_imperial_authority = yes
				is_hive_empire = yes
				is_megacorp = yes
				is_machine_empire = yes
			}
		}
		text = "EaC_civic_mechanic_events.103.desc.other"
	}



	# Displays proper options based on authority and leader type
	option = {
		trigger = {
			ruler = { leader_class = official }
			OR = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
			}
		}
		name = EaC_civic_mechanic_events.103.option.official_elected_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = official }
			is_oligarchic_authority = yes
		}
		name = EaC_civic_mechanic_events.103.option.official_elected_20_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = official }
			is_dictatorial_authority = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.official_dictator_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.official_dictator_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				if = {
					limit = { has_base_skill < 10 }
					add_skill = 1
				}
				else = {
					custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
				}
			}
			# Memoralist Civic Effects
			else_if = {
				limit = {
					OR = {
						has_base_skill = 9
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 9
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 9 }
					set_skill = 9
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 8
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 8
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 8 }
					set_skill = 8
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 7
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 7
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 7 }
					set_skill = 7
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 6
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 6
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 6 }
					set_skill = 6
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 5
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 5
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 5 }
					set_skill = 5
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 4
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 4
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 4 }
					set_skill = 4
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 3
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 3
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 3 }
					set_skill = 3
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 2
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 2
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 2 }
					set_skill = 2
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 1
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 1
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 1 }
					set_skill = 1
				}
			}
			else = {
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = official }
			is_imperial_authority = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.official_imperial_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.official_imperial_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				if = {
					limit = { has_base_skill < 10 }
					add_skill = 1
				}
				else = {
					custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
				}
			}
			# Memoralist Civic Effects
			else_if = {
				limit = {
					OR = {
						has_base_skill = 9
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 9
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 9 }
					set_skill = 9
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 8
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 8
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 8 }
					set_skill = 8
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 7
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 7
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 7 }
					set_skill = 7
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 6
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 6
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 6 }
					set_skill = 6
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 5
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 5
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 5 }
					set_skill = 5
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 4
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 4
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 4 }
					set_skill = 4
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 3
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 3
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 3 }
					set_skill = 3
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 2
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 2
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 2 }
					set_skill = 2
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 1
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 1
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 1 }
					set_skill = 1
				}
			}
			else = {
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = official }
			is_hive_empire = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.official_hive_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.official_hive_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = official }
			is_megacorp = yes
		}
		name = EaC_civic_mechanic_events.103.option.official_megacorp_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = official }
			is_machine_empire = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.official_machine_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.official_machine_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			OR = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
			}
		}
		name = EaC_civic_mechanic_events.103.option.commander_elected_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			is_oligarchic_authority = yes
		}
		name = EaC_civic_mechanic_events.103.option.commander_elected_20_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			is_dictatorial_authority = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.commander_dictator_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.commander_dictator_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				if = {
					limit = { has_base_skill < 10 }
					add_skill = 1
				}
				else = {
					custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
				}
			}
			# Memoralist Civic Effects
			else_if = {
				limit = {
					OR = {
						has_base_skill = 9
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 9
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 9 }
					set_skill = 9
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 8
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 8
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 8 }
					set_skill = 8
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 7
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 7
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 7 }
					set_skill = 7
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 6
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 6
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 6 }
					set_skill = 6
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 5
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 5
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 5 }
					set_skill = 5
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 4
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 4
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 4 }
					set_skill = 4
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 3
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 3
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 3 }
					set_skill = 3
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 2
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 2
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 2 }
					set_skill = 2
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 1
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 1
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 1 }
					set_skill = 1
				}
			}
			else = {
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			is_imperial_authority = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.commander_imperial_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.commander_imperial_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				if = {
					limit = { has_base_skill < 10 }
					add_skill = 1
				}
				else = {
					custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
				}
			}
			# Memoralist Civic Effects
			else_if = {
				limit = {
					OR = {
						has_base_skill = 9
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 9
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 9 }
					set_skill = 9
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 8
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 8
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 8 }
					set_skill = 8
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 7
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 7
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 7 }
					set_skill = 7
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 6
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 6
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 6 }
					set_skill = 6
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 5
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 5
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 5 }
					set_skill = 5
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 4
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 4
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 4 }
					set_skill = 4
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 3
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 3
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 3 }
					set_skill = 3
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 2
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 2
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 2 }
					set_skill = 2
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 1
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 1
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 1 }
					set_skill = 1
				}
			}
			else = {
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			is_hive_empire = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.commander_hive_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.commander_hive_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			is_megacorp = yes
		}
		name = EaC_civic_mechanic_events.103.option.commander_megacorp_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			is_machine_empire = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.commander_machine_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.commander_machine_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			OR = {
				has_authority = auth_direct_democratic
				is_democratic_authority = yes
			}
		}
		name = EaC_civic_mechanic_events.103.option.scientist_elected_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			is_oligarchic_authority = yes
		}
		name = EaC_civic_mechanic_events.103.option.scientist_elected_20_a
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			is_dictatorial_authority = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_dictator_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_dictator_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				if = {
					limit = { has_base_skill < 10 }
					add_skill = 1
				}
				else = {
					custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
				}
			}
			# Memoralist Civic Effects
			else_if = {
				limit = {
					OR = {
						has_base_skill = 9
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 9
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 9 }
					set_skill = 9
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 8
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 8
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 8 }
					set_skill = 8
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 7
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 7
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 7 }
					set_skill = 7
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 6
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 6
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 6 }
					set_skill = 6
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 5
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 5
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 5 }
					set_skill = 5
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 4
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 4
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 4 }
					set_skill = 4
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 3
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 3
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 3 }
					set_skill = 3
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 2
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 2
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 2 }
					set_skill = 2
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 1
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 1
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 1 }
					set_skill = 1
				}
			}
			else = {
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			is_imperial_authority = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_imperial_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_imperial_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				if = {
					limit = { has_base_skill < 10 }
					add_skill = 1
				}
				else = {
					custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
				}
			}
			# Memoralist Civic Effects
			else_if = {
				limit = {
					OR = {
						has_base_skill = 9
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 9
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 9 }
					set_skill = 9
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 8
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 8
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 8 }
					set_skill = 8
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 7
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 7
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 7 }
					set_skill = 7
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 6
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 6
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 6 }
					set_skill = 6
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 5
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 5
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 5 }
					set_skill = 5
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 4
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 4
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 4 }
					set_skill = 4
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 3
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 3
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 3 }
					set_skill = 3
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 2
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 2
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 2 }
					set_skill = 2
				}
			}
			else_if = {
				limit = {
					OR = {
						has_base_skill = 1
						root = {
							check_variable = {
								which = ruler_ancestor_level # Must be directly referring to a variable
								value = 1
							}
						}
					}
				}
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				if = {
					limit = { has_base_skill != 1 }
					set_skill = 1
				}
			}
			else = {
				hidden_effect = { root = { clear_variable = ruler_ancestor_level } }
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			is_hive_empire = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_hive_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_hive_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = { has_base_skill < 10 }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			is_megacorp = yes
		}
		name = EaC_civic_mechanic_events.103.option.scientist_megacorp_a
		RULER = {
			if = {
				limit = { root = { is_memorialist_empire = no } }
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			is_machine_empire = yes
		}
		name = {
			trigger = {
				is_memorialist_empire = no
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_machine_a"
		}
		name = {
			trigger = {
				is_memorialist_empire = yes
			}
			text = "EaC_civic_mechanic_events.103.option.scientist_machine_is_memorialist_empire_a"
		}
		RULER = {
			if = {
				limit = {
					root = { is_memorialist_empire = no }
					has_base_skill < 10
				}
				add_skill = 1
			}
			else = {
				custom_tooltip = EaC_civic_mechanic_events.103.tooltip.leader_is_max_level
			}
		}
	}
	####################
	# Civic heroic tales#
	####################
	option = {
		trigger = {
			ruler = { leader_class = official }
			has_civic = civic_heroic_tales
		}
		name = EaC_civic_mechanic_events.103.option.civic_heroic_tales.official.a
	}
	option = {
		trigger = {
			ruler = { leader_class = commander }
			has_civic = civic_heroic_tales
		}
		name = EaC_civic_mechanic_events.103.option.civic_heroic_tales.commander.a
	}
	option = {
		trigger = {
			ruler = { leader_class = scientist }
			has_civic = civic_heroic_tales
		}
		name = EaC_civic_mechanic_events.103.option.civic_heroic_tales.scientist.a
	}
}
#
#####################################################################################################################
# MERCENARY ENCLAVES OVERWRITE
#####################################################################################################################

# Spawn Mercenary enclave
fleet_event = {
	id = enclave.2
	title = "enclave.2.name"
	picture = GFX_evt_mercenary_enclave
	show_sound = event_cityscape
	is_triggered_only = yes

	desc = {
		trigger = { owner = { has_civic = civic_military_dictatorship_corporate } }
		text = "EaC_civic_mechanic_events.2.desc"
	}
	desc = {
		trigger = {
			owner = {
				has_civic = civic_criminal_heritage
				has_civic = civic_crusader_spirit_corporate
			}
		}
		text = "EaC_civic_mechanic_events.2.desc.criminal_heritage"
	}
	desc = {
		trigger = {
			owner = {
				if = {
					limit = { has_civic = civic_criminal_heritage }
					NOT = { has_valid_civic = civic_crusader_spirit_corporate }
				}
				else = { NOT = { has_valid_civic = civic_military_dictatorship_corporate } }
			}

		}
		text = "enclave.2.desc"
	}

	trigger = {
		is_merc_enclave_founding_allowed = yes
	}

	immediate = {
		set_event_locked = yes
	}

	option = {
		name = DEAL
		custom_tooltip = "enclave.2.a.tooltip"
		trigger = {
			owner = {
				if = {
					limit = { has_civic = civic_criminal_heritage }
					NOT = { has_valid_civic = civic_crusader_spirit_corporate }
				}
				else = { NOT = { has_valid_civic = civic_military_dictatorship_corporate } }
			}
		}
		allow = {
			is_merc_enclave_founding_allowed = yes
			owner = {
				if = {
					limit = {
						country_uses_bio_ships = yes
					}
					resource_stockpile_compare = { resource = food value >= 1500 }
				}
				else = {
				resource_stockpile_compare = { resource = energy value >= 1500 }
				}
				resource_stockpile_compare = { resource = alloys value >= 2000 }
				resource_stockpile_compare = { resource = influence value >= 100 }
			}
		}
		owner = {
			if = {
				limit = {
					country_uses_bio_ships = yes
				}
				add_resource = {
					food = -1500
				}
			}
			else = {
			add_resource = {
				energy = -1500
				}
			}
			add_resource = {
				alloys = -2000
				influence = -100
			}
		}

		hidden_effect = {
			owner = {
				set_country_flag = tutorial_met_mercenary_enclave
				set_country_flag = formed_mercenaries
			}
			fleet_event = { id = enclave.21 }
		}

		ai_chance = {
			factor = 10
			modifier = {
				factor = 0
				owner = {
					has_ethic = ethic_fanatic_pacifist
				}
			}
			modifier = {
				factor = 0.1
				owner = {
					has_ethic = ethic_pacifist
				}
			}
			modifier = {
				factor = 5
				owner = {
					has_ethic = ethic_militarist
				}
			}
			modifier = {
				factor = 10
				owner = {
					has_ethic = ethic_fanatic_militarist
				}
			}
			modifier = {
				factor = 5
				owner = {
					is_megacorp = yes
				}
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2.a
		custom_tooltip = "EaC_civic_mechanic_events.2.a.tooltip"
		trigger = { owner = { has_civic = civic_military_dictatorship_corporate } }
		allow = {
			is_merc_enclave_founding_allowed = yes
			owner = {
				if = {
					limit = {
						country_uses_bio_ships = yes
					}
					resource_stockpile_compare = { resource = food value >= 1500 }
				}
				else = {
				resource_stockpile_compare = { resource = energy value >= 1500 }
				}
				resource_stockpile_compare = { resource = alloys value >= 2000 }
				resource_stockpile_compare = { resource = influence value >= 100 }
			}
		}
		owner = {
			if = {
				limit = {
					country_uses_bio_ships = yes
				}
				add_resource = {
					food = -1500
				}
			}
			else = {
			add_resource = {
				energy = -1500
				}
			}
			add_resource = {
				alloys = -2000
				influence = -100
			}
		}

		hidden_effect = {
			owner = {
				set_country_flag = tutorial_met_mercenary_enclave
				set_country_flag = formed_mercenaries
			}
			fleet_event = { id = EaC_civic_mechanic_events.21 }
		}

		ai_chance = {
			factor = 1000
			modifier = {
				factor = 0
				owner = {
					has_ethic = ethic_fanatic_pacifist
				}
			}
			modifier = {
				factor = 0.1
				owner = {
					has_ethic = ethic_pacifist
				}
			}
			modifier = {
				factor = 5
				owner = {
					has_ethic = ethic_militarist
				}
			}
			modifier = {
				factor = 10
				owner = {
					has_ethic = ethic_fanatic_militarist
				}
			}
			modifier = {
				factor = 5
				owner = {
					is_megacorp = yes
				}
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2.a.criminal_heritage
		custom_tooltip = "EaC_civic_mechanic_events.2.a.tooltip"
		trigger = {
			owner = {
				has_civic = civic_criminal_heritage
				has_civic = civic_crusader_spirit_corporate
			}
		}
		allow = {
			is_merc_enclave_founding_allowed = yes
			owner = {
				if = {
					limit = {
						country_uses_bio_ships = yes
					}
					resource_stockpile_compare = { resource = food value >= 1500 }
				}
				else = {
				resource_stockpile_compare = { resource = energy value >= 1500 }
				}
				resource_stockpile_compare = { resource = alloys value >= 2000 }
				resource_stockpile_compare = { resource = influence value >= 100 }
			}
		}
		owner = {
			if = {
				limit = {
					country_uses_bio_ships = yes
				}
				add_resource = {
					food = -1500
				}
			}
			else = {
			add_resource = {
				energy = -1500
				}
			}
			add_resource = {
				alloys = -2000
				influence = -100
			}
		}

		hidden_effect = {
			owner = {
				set_country_flag = tutorial_met_mercenary_enclave
				set_country_flag = formed_mercenaries
			}
			fleet_event = { id = EaC_civic_mechanic_events.21 }
		}

		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				owner = {
					has_ethic = ethic_fanatic_pacifist
				}
			}
			modifier = {
				factor = 0.1
				owner = {
					has_ethic = ethic_pacifist
				}
			}
			modifier = {
				factor = 5
				owner = {
					has_ethic = ethic_militarist
				}
			}
			modifier = {
				factor = 10
				owner = {
					has_ethic = ethic_fanatic_militarist
				}
			}
			modifier = {
				factor = 5
				owner = {
					is_megacorp = yes
				}
			}
		}
	}

	option = {
		name = NODEAL

		ai_chance = {
			factor = 5
			modifier = {
				factor = 0.1
				owner = {

					is_militarist = yes
					NOT = { has_ethic = ethic_fanatic_pacifist }
				}
			}
		}
	}

	abort_trigger = {
		owner = {
			has_origin = origin_mindwardens
		}
	}

	after = {
		hidden_effect = {
			set_event_locked = no
		}
	}
}

# Khan dies, mercenaries leave
event = {
	id = enclave.2055
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = great_khan_dead
		any_country = {
			is_country_type = enclave_mercenary
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
			any_owned_fleet = {
				is_leased = yes
				controller = {
					is_country_type = awakened_marauders
				}
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = awakened_marauders
			}
			save_event_target_as = khan_country
		}

		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
				any_owned_fleet = {
					is_leased = yes
					controller = {
						is_country_type = awakened_marauders
					}
				}
			}
			random_owned_fleet ={
				limit = {
					is_leased = yes
					controller = {
						is_country_type = awakened_marauders
					}
				}
				end_fleet_contract = {
					initiator = event_target:khan_country
					reason = cancelled
				}
			}
			remove_country_flag = mercenary_enclave_rented_fleet
		}
	}
}

# Unemployed mercs return to merc station
event = {
	id = enclave.2065
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = enclave_mercenary
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
			any_owned_fleet = {
				is_leased = no
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
				any_owned_fleet = {
					is_leased = no
				}
			}
			country_event = {id = enclave.2070 days = 5}
		}
	}
}

# Khan hires available mercs
event = {
	id = enclave.2045
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = awakened_marauders
		}
		NOT = { has_global_flag = great_khan_dead }
		any_country = {
			is_country_type = enclave_mercenary
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
			NOT = {
				any_owned_fleet = {
					is_leased = yes
				}
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = awakened_marauders
			}
			save_event_target_as = khan_country
			random_owned_fleet = {
				limit = {
					has_fleet_flag = khan_fleet
				}
				save_event_target_as = khan_fleet
			}
		}
		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
				NOT = {
					any_owned_fleet = {
						is_leased = yes
					}
				}
			}
			save_event_target_as = mercenary_enclave_country
			# Check if the patron is a player to give them a chance at a counteroffer
			if = {
				limit = {
					event_target:mercenary_enclave_country = {
						any_owned_fleet = {
							is_ship_size = enclave_mercenary_station
							solar_system = {
								exists = space_owner
								space_owner = {
									is_ai = yes
								}
							}
						}
					}
				}
				# Khan hires only the main fleet
				ordered_controlled_fleet = {
					limit = {
						is_ship_class = shipclass_military
						is_leased = no
					}
					position = 0
					order_by = trigger:fleet_power
					save_event_target_as = mercenary_fleet
				}
				if = {
					limit = {
						exists = event_target:mercenary_fleet
					}
					event_target:mercenary_fleet = {
						give_fleet = { controller = event_target:khan_country days = 1510 }
						set_name = {
							key = NAME_Mercenary_Fleet
							variable_string = "[event_target:mercenary_enclave_country.GetName]"
						}
						auto_follow_fleet = {
	 						target = event_target:khan_fleet
						}
					}
				}
				set_country_flag = mercenary_enclave_rented_fleet
			}
			else = {
				event_target:mercenary_enclave_country = {
					random_owned_fleet = {
						limit = {
							is_ship_size = enclave_mercenary_station
							exists = solar_system
						}
						solar_system = {
							if = {
								limit = {
									exists = space_owner
								}
								space_owner = {
									country_event = { id = enclave.2050 }
								}
							}
						}
					}
				}
			}
		}
	}
}

country_event = { # Assign an admiral to hired merc fleet if they lose theirs
	id = enclave.2075
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_civic = civic_mercenary_enclave
		NOT = { has_valid_civic = civic_mercenary_enclave }
		any_owned_fleet = {
			is_leased = yes
			NOT = {
				exists = leader
			}
		}
	}

	immediate = {
		create_leader = {
			class = commander
			species = event_target:mercenary_enclave_species
			event_leader = yes
			name = random
			skill = 3
			traits = {
				trait = leader_trait_mercenary_warrior
			}
		}
		random_owned_fleet = {
			limit = {
				is_leased = yes
				NOT = {
					exists = leader
				}
			}
			assign_leader = last_created_leader
		}
	}
}

# Mercenary Enclave Greetings: Gatekeeper event
# Via on_custom_diplomacy | this = target country (player); from = country being contacted
country_event = {
	id = enclave.200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			is_country_type = enclave_mercenary
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
			has_country_flag = mercenary_enclave_country
		}
		NOT = {
			has_active_event = {
				enclave.205 # GREETINGS
				enclave.210 # HIRE FLEET
				enclave.211 # THANKS FOR RENTAL
				enclave.215 # MANAGE HIRED FLEET
				enclave.220 # MERCENARY GARRISON starbase building
				enclave.235 # Expand Mercenary Fleet
				enclave.240 # Tactical Appraisal
				enclave.245 # Tactical Appraisal Khan
				enclave.250 # Tactical Appraisal Gray Tempest
				enclave.255 # Tactical Appraisal Prethoryn
				enclave.260 # Tactical Appraisal Unbidden
				enclave.270 # Hire Armies
				enclave.275 # Merc Pays Back Patron
				enclave.280 # Patron Panel
				enclave.285 # Recall Fleet
				EaC_civic_mechanic_events.205 # GREETINGS
				EaC_civic_mechanic_events.210 # HIRE FLEET
				EaC_civic_mechanic_events.211 # THANKS FOR RENTAL
				EaC_civic_mechanic_events.215 # MANAGE HIRED FLEET
				EaC_civic_mechanic_events.220 # MERCENARY GARRISON starbase building
				EaC_civic_mechanic_events.235 # Expand Mercenary Fleet
				EaC_civic_mechanic_events.240 # Tactical Appraisal
				EaC_civic_mechanic_events.245 # Tactical Appraisal Khan
				EaC_civic_mechanic_events.250 # Tactical Appraisal Gray Tempest
				EaC_civic_mechanic_events.255 # Tactical Appraisal Prethoryn
				EaC_civic_mechanic_events.260 # Tactical Appraisal Unbidden
				EaC_civic_mechanic_events.270 # Hire Armies
				EaC_civic_mechanic_events.275 # Merc Pays Back Patron
				EaC_civic_mechanic_events.280 # Patron Panel
				EaC_civic_mechanic_events.285 # Recall Fleet
			}
		}
	}

	immediate = {
		ai_trade_facility = {
			offer_hire_mercenary_fleet = yes
			offer_prolong_fleet_contract = yes
			from = {
				save_event_target_as = mercenary_enclave_country
				# Failsafe to catch if fleets are no longer on loan
				remove_loaning_fleet_flag = yes
			}
			country_event = { id = enclave.205 }
		}
	}
}

# Mercs under attack recall their fleet
country_event = {
	id = enclave.27
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = enclave_mercenary
		NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
		OR = {
			fromfrom = { is_ship_size = enclave_mercenary_station }
			fromfromfrom = { is_ship_size = enclave_mercenary_station }
		}
	}

	immediate = {
		save_event_target_as = mercenary_enclave_country
		random_owned_fleet = {
			limit = {
				is_ship_size = enclave_mercenary_station
			}
			solar_system = {
				save_event_target_as = mercenary_home_system
			}
		}
		random_owned_fleet = {
			limit = {
				is_ship_class = shipclass_military
				is_leased = yes
			}
			save_event_target_as = mercenary_fleet
			controller = {
				save_event_target_as = mercenary_client
				if = { # No Refund if the client is the attacker
					limit = {
						NOT = {
							event_target:mercenary_client = {
								is_hostile = event_target:mercenary_enclave_country
							}
						}
					}
					country_event = { id = enclave.29 days = 7 }
				}
			}
		}
		set_country_flag = enclave_under_attack
	}
}

# Merc Enclave Destroyed (HIDDEN)
country_event = {
	id = enclave.23
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			is_country_type = enclave_mercenary
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
			fromfrom = {
				is_ship_size = enclave_mercenary_station
			}
		}
	}

	immediate = {
		fromfrom = {
			solar_system = {
				save_event_target_as = merc_system
				remove_star_flag = enclave
				remove_star_flag = EaC_civic_mechanic_events.pirate_enclave.star_flag
			}
		}
		from = {
			country_event = { id = enclave.25 }
			save_event_target_as = mercenary_destroyer
		}
		every_country = {
			limit = {
				has_communications = root
				NOT = { is_same_empire = event_target:mercenary_destroyer }
				is_country_type = default
			}
			country_event = { id = enclave.26 }
		}
	}
	after = {
		destroy_country = yes
		every_country = {
			limit = {
				has_modifier = country_enclave_capacity_decrease_modifier
			}
			country_event = { id = enclave.24 days = 2 }
		}
	}
}

# This = fleet
# From = country that borrowed the fleet
# fromfrom = country that owns the fleet
# Is fired immediately after fleet is leased out
fleet_event = {
	id = enclave.2085
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			has_civic = civic_mercenary_enclave
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
		}
	}

	immediate = {
		if = {
			limit = {
				exists = leader
			}
			leader = {
				set_leader_flag = hired_admiral_merc_leader
				set_owner = from
			}
		}
	}
}

# Flag the enclave to block the AI from hiring mercs too quickly
fleet_event = {
	id = enclave.2058
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			has_civic = civic_mercenary_enclave
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
			NOT = {
				has_country_flag = merc_ai_delay
			}
		}
	}

	immediate = {
		fromfrom = {
			set_timed_country_flag = {
				flag = merc_ai_delay
				years = 1
			}
		}
	}
}

# Merc Fleet Lease Ended
fleet_event = {
	id = enclave.2059
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			is_ai = no
		}
		fromfrom = {
			has_civic = civic_mercenary_enclave
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
		}
	}

	immediate = {
		fromfrom = {
			save_event_target_as = mercenary_enclave_country
			# Failsafe to catch if fleets are no longer on loan
			remove_loaning_fleet_flag = yes
		}
		from = {
			country_event = { id = enclave.2060 }
		}
	}
}

# This = fleet
# From = country that borrowed the fleet
# fromfrom = country that owns the fleet
# fromfromfrom = country that initiated the ending (the same as owner in a case of expiration)
fleet_event = {
	id = enclave.2080
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			has_civic = civic_mercenary_enclave
			NOT = { has_valid_civic = civic_pirate_mercenary_enclave }
		}
	}

	immediate = {
		if = {
			limit = {
				exists = leader
			}
			leader = {
				set_owner = fromfrom
			}
		}
	}
}

#####################################################################################################################
#####################################################################################################################
#####################################################################################################################
#####################################################################################################################
# 0.200 - Letters of Marque + Pirate Lord = allows for pirate bay mercenary enclaves
#####################################################################################################################
# PIRATE BAY ENCLAVES################################################################################################
#####################################################################################################################

fleet_event = {
	id = EaC_civic_mechanic_events.21
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Save creator empire as event target
		owner = {
			save_event_target_as = mercenary_enclave_creator
		}
		# Set up the ruler and species
		leader = {
			species = {
				save_event_target_as = mercenary_enclave_species
			}
			exile_leader_as = mercenary_enclave_leader
			save_event_target_as = mercenary_enclave_leader
		}
		# Set up the enclave starbase
		solar_system = {
			set_star_flag = enclave
			set_star_flag = EaC_civic_mechanic_events.pirate_enclave.star_flag
			set_star_flag = mercenary_enclave_system
			# Set up on a moon only if an asteroid isn't available
			if = {
				limit = {
					count_system_planet = {
						count < 1
						limit = { is_asteroid = yes }
					}
				}
				random_system_planet = {
					limit = { is_moon = yes }
					save_event_target_as = mercenary_enclave_planet
					set_planet_flag = mercenary_enclave_planet
				}
			}
			else = {
				random_system_planet = {
					limit = { is_asteroid = yes }
					save_event_target_as = mercenary_enclave_planet
					set_planet_flag = mercenary_enclave_planet
				}
			}
		}
		# Create the Mercenary country, and assign a flavour ethic. Note that these are applied in priority order, so a patron who is Xenophilic, Authoritarian *and* Materialistic will found an enclave which is Fanatic Militarist and Materialist, as Materialism is listed first.
		if = {
			limit = {
				owner = { is_materialist = yes }
			}
			create_pirate_mercenary_enclave_country = { INHERITED_ETHIC = ethic_materialist }
		}
		else_if = {
			limit = {
				owner = { is_xenophobe = yes }
			}
			create_pirate_mercenary_enclave_country = { INHERITED_ETHIC = ethic_xenophobe }
		}
		else_if = {
			limit = {
				owner = { is_authoritarian = yes }
			}
			create_pirate_mercenary_enclave_country = { INHERITED_ETHIC = ethic_authoritarian }
		}
		else_if = {
			limit = {
				owner = { is_egalitarian = yes }
			}
			create_pirate_mercenary_enclave_country = { INHERITED_ETHIC = ethic_egalitarian }
		}
		else_if = {
			limit = {
				owner = { is_egalitarian = yes }
			}
			create_pirate_mercenary_enclave_country = { INHERITED_ETHIC = ethic_egalitarian }
		}
		else = {
			create_pirate_mercenary_enclave_country = { INHERITED_ETHIC = ethic_xenophile }
		}


		# Give enclave creator's tech, start situation, and set creator flag
		event_target:mercenary_enclave_country = {
			copy_techs_from = { target = event_target:mercenary_enclave_creator }
			start_situation = {
				type = pirate_mercenary_dividends
				target = root
			}
			set_country_flag = created_by@event_target:mercenary_enclave_creator
			add_trust = {
				who =  event_target:mercenary_enclave_creator
				amount = 30
			}
			# Check for active resolutions and give associated modifiers to enclave
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_defense_contracts
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_defense_contracts_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_private_support_troops
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_private_support_troops_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_condottieri
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_condottieri_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_security_business
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_security_business_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_corporate_warlords
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_corporate_warlords_merc_naval_cap
				}
			}

			# Set a flag to prevent the AI from instantly hiring them
			set_timed_country_flag = {
				flag = merc_ai_delay
				years = 1
			}
		}

		owner = {
			add_modifier = {
				modifier = country_enclave_capacity_decrease_modifier
				multiplier = value:created_enclave_number
			}
		}

		# Transfer ownership of the fleet
		set_owner = event_target:mercenary_enclave_country
	}

	after = {
		event_target:mercenary_enclave_creator = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
		event_target:mercenary_enclave_country = {
			country_event = { id = EaC_civic_mechanic_events.22 days = 1 }
		}
	}
}

country_event = { # Flag the enclave creator for enclave capacity purposes
	id = EaC_civic_mechanic_events.22
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:mercenary_enclave_creator = {
			set_country_flag = merc_enclave_founder@root
		}
	}
}

# Merc Enclave Destroyed (HIDDEN)
country_event = {
	id = EaC_civic_mechanic_events.23
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			is_country_type = enclave_mercenary
			has_civic = civic_pirate_mercenary_enclave
			fromfrom = {
				is_ship_size = enclave_pirate_mercenary_station
			}
		}
	}

	immediate = {
		fromfrom = {
			solar_system = {
				save_event_target_as = merc_system
				remove_star_flag = enclave
				remove_star_flag = EaC_civic_mechanic_events.pirate_enclave.star_flag
			}
		}
		from = {
			country_event = { id = EaC_civic_mechanic_events.25 }
			save_event_target_as = mercenary_destroyer
		}
		every_country = {
			limit = {
				has_communications = root
				NOT = { is_same_empire = event_target:mercenary_destroyer }
				is_country_type = default
			}
			country_event = { id = EaC_civic_mechanic_events.26 }
		}
	}
	after = {
		destroy_country = yes
		every_country = {
			limit = {
				has_modifier = country_enclave_capacity_decrease_modifier
			}
			country_event = { id = EaC_civic_mechanic_events.24 days = 2 }
		}
	}
}

country_event = { # After enclave destruction, give back enclave cap
	id = EaC_civic_mechanic_events.24
	hide_window = yes
	is_triggered_only = yes

	after = {
		add_modifier = {
			modifier = country_enclave_capacity_decrease_modifier
			multiplier = value:created_enclave_number
		}
	}
}

country_event = { # Merc Destroyed (Destroyer)
	id = EaC_civic_mechanic_events.25
	title = "EaC_civic_mechanic_events.25"
	desc = "EaC_civic_mechanic_events.25.desc"
	picture = GFX_evt_space_debris
	location = event_target:merc_system
	show_sound = event_ship_bridge

	is_triggered_only = yes

	immediate = {
		set_country_flag = destroyed_mercs
	}

	option = {
		name = EXCELLENT
		add_resource = {
			alloys = 2000
			energy = 2000
		}
	}
}

country_event = { # Merc Destroyed
	id = EaC_civic_mechanic_events.26
	title = "EaC_civic_mechanic_events.25"
	desc = "EaC_civic_mechanic_events.26.desc"
	picture = GFX_evt_space_debris
	location = event_target:merc_system
	show_sound = event_ship_bridge

	is_triggered_only = yes

	immediate = {
		add_modifier = {
			modifier = country_enclave_capacity_decrease_modifier
			multiplier = value:created_enclave_number
		}
	}

	option = {
		name = UNFORTUNATE
		trigger = {
			NOT = { has_country_flag = merc_enclave_founder@root }
		}
	}
	option = {
		name = EaC_civic_mechanic_events.26.a
		trigger = {
			has_country_flag = merc_enclave_founder@root
		}
	}
}

# Mercs under attack recall their fleet
country_event = {
	id = EaC_civic_mechanic_events.27
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = enclave_mercenary
		has_civic = civic_pirate_mercenary_enclave
		OR = {
			fromfrom = { is_ship_size = enclave_pirate_mercenary_station }
			fromfromfrom = { is_ship_size = enclave_pirate_mercenary_station }
		}
	}

	immediate = {
		save_event_target_as = mercenary_enclave_country
		random_owned_fleet = {
			limit = {
				is_ship_size = enclave_pirate_mercenary_station
			}
			solar_system = {
				save_event_target_as = mercenary_home_system
			}
		}
		random_owned_fleet = {
			limit = {
				is_ship_class = shipclass_military
				is_leased = yes
			}
			save_event_target_as = mercenary_fleet
			controller = {
				save_event_target_as = mercenary_client
				if = { # No Refund if the client is the attacker
					limit = {
						NOT = {
							event_target:mercenary_client = {
								is_hostile = event_target:mercenary_enclave_country
							}
						}
					}
					country_event = { id = EaC_civic_mechanic_events.29 days = 7 }
				}
			}
		}
		set_country_flag = enclave_under_attack
	}
}

# Merc sue for peace
# country_event = {
#	id = EaC_civic_mechanic_events.28
#	title = "EaC_civic_mechanic_events.28"
#	desc = "EaC_civic_mechanic_events.28.desc"
#	picture = GFX_evt_space_debris # Change pic and sound
#	location = event_target:merc_system
#	show_sound = event_ship_bridge
#
#	is_triggered_only = yes
#
#	option = {
#		name = EaC_civic_mechanic_events.28.a
#		trigger = {
#			# Refuse
#		}
#	}
#	option = {
#		name = EaC_civic_mechanic_events.28.b
#		trigger = {
#			# Accept
#		}
#	}
#}

# Emergency Requisition (Client Side)
country_event = {
	id = EaC_civic_mechanic_events.29
	title = "EaC_civic_mechanic_events.27"
	desc = "EaC_civic_mechanic_events.27.desc"
	picture = GFX_evt_mercenary_fleet
	location = event_target:merc_system
	show_sound = evn_ove_mercenary_fleet

	is_triggered_only = yes

	trigger = {
		exists = event_target:mercenary_fleet
		event_target:mercenary_fleet = {
			is_leased = yes
		}
	}

	immediate = {
		event_target:mercenary_fleet = {
			end_fleet_contract = {
				initiator = event_target:mercenary_enclave_country
				reason = broken
			}
			remove_fleet_flag = fleet_on_loan@root
			set_location = {
				target = event_target:mercenary_home_system
			}
		}
	}

	option = { # Refund money good luck
		name = EaC_civic_mechanic_events.27.a
		if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_5
				}
			}
			add_resource = { energy = 44000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_4
					NOT = { has_modifier = mercenary_fleet_size_upgrade_5 }
				}
			}
			add_resource = { energy = 30000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_3
					NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				}
			}
			add_resource = { energy = 20000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_2
					NOT = { has_modifier = mercenary_fleet_size_upgrade_3 }
				}
			}
			add_resource = { energy = 12000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_1
					NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
				}
			}
			add_resource = { energy = 6000 }
		}
		else = {
			add_resource = { energy = 3000 }
		}
	}
	option = { # Refund money be grumpy
		name = EaC_civic_mechanic_events.27.b
		if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_5
				}
			}
			add_resource = { energy = 44000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_4
					NOT = { has_modifier = mercenary_fleet_size_upgrade_5 }
				}
			}
			add_resource = { energy = 30000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_3
					NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				}
			}
			add_resource = { energy = 20000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_2
					NOT = { has_modifier = mercenary_fleet_size_upgrade_3 }
				}
			}
			add_resource = { energy = 12000 }
		}
		else_if = {
			limit = {
				event_target:mercenary_enclave_country = {
					has_modifier = mercenary_fleet_size_upgrade_1
					NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
				}
			}
			add_resource = { energy = 6000 }
		}
		else = {
			add_resource = { energy = 3000 }
		}
	}
}

# Mercenary Enclave Greetings: Gatekeeper event
# Via on_custom_diplomacy | this = target country (player); from = country being contacted
country_event = {
	id = EaC_civic_mechanic_events.200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			is_country_type = enclave_mercenary
			has_country_flag = mercenary_enclave_country
		}
		NOT = {
			has_active_event = {
				EaC_civic_mechanic_events.205 # GREETINGS
				EaC_civic_mechanic_events.210 # HIRE FLEET
				EaC_civic_mechanic_events.211 # THANKS FOR RENTAL
				EaC_civic_mechanic_events.215 # MANAGE HIRED FLEET
				EaC_civic_mechanic_events.220 # MERCENARY GARRISON starbase building
				EaC_civic_mechanic_events.235 # Expand Mercenary Fleet
				EaC_civic_mechanic_events.240 # Tactical Appraisal
				EaC_civic_mechanic_events.245 # Tactical Appraisal Khan
				EaC_civic_mechanic_events.250 # Tactical Appraisal Gray Tempest
				EaC_civic_mechanic_events.255 # Tactical Appraisal Prethoryn
				EaC_civic_mechanic_events.260 # Tactical Appraisal Unbidden
				EaC_civic_mechanic_events.270 # Hire Armies
				EaC_civic_mechanic_events.275 # Merc Pays Back Patron
				EaC_civic_mechanic_events.280 # Patron Panel
				EaC_civic_mechanic_events.285 # Recall Fleet
				enclave.205 # GREETINGS
				enclave.210 # HIRE FLEET
				enclave.211 # THANKS FOR RENTAL
				enclave.215 # MANAGE HIRED FLEET
				enclave.220 # MERCENARY GARRISON starbase building
				enclave.235 # Expand Mercenary Fleet
				enclave.240 # Tactical Appraisal
				enclave.245 # Tactical Appraisal Khan
				enclave.250 # Tactical Appraisal Gray Tempest
				enclave.255 # Tactical Appraisal Prethoryn
				enclave.260 # Tactical Appraisal Unbidden
				enclave.270 # Hire Armies
				enclave.275 # Merc Pays Back Patron
				enclave.280 # Patron Panel
				enclave.285 # Recall Fleet
			}
		}
	}

	immediate = {
		ai_trade_facility = {
			offer_hire_mercenary_fleet = yes
			offer_prolong_fleet_contract = yes
			from = {
				save_event_target_as = mercenary_enclave_country
				# Failsafe to catch if fleets are no longer on loan
				remove_loaning_fleet_flag = yes
			}
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}
}

# Post-First Contact setup
# from = First Contact site owner
country_event = {
	id = enclave.204
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { has_civic = civic_pirate_mercenary_enclave }
			if = {
				limit = {
					from = {
						NOT = { has_country_flag = mercenary_enclave_country }
					}
				}
				from = {
					country_event = { id = EaC_civic_mechanic_events.205 }
				}
			}
			else = {
				fromfrom = {
					country_event = { id = EaC_civic_mechanic_events.205 }
				}
			}
		}
		else = {
			if = {
				limit = {
					from = {
						NOT = { has_country_flag = mercenary_enclave_country }
					}
				}
				from = {
					country_event = { id = enclave.205 }
				}
			}
			else = {
				fromfrom = {
					country_event = { id = enclave.205 }
				}
			}
		}
	}
}

# Mercenary Enclave: GREETINGS
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.205
	title = EaC_civic_mechanic_events.205.name
	desc = {
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
			}
		}
		text = EaC_civic_mechanic_events.205.desc
	}
	desc = {
		trigger = {
			is_hostile = event_target:mercenary_enclave_country
		}
		text = EaC_civic_mechanic_events.205.desc.hostile
	}

	is_triggered_only = yes

	diplomatic = yes
	custom_gui = "enclave_mercenary_window"
	custom_gui_option = "enclave_mercenary_option"
	picture_event_data = {
		portrait = event_target:mercenary_enclave_country
		room = mercenary_enclave_room
	}
	location = event_target:mercenary_enclave_system

	immediate = {
		event_target:mercenary_enclave_country = {
			species = {
				save_event_target_as = mercenary_enclave_species
			}
			random_owned_fleet = {
				limit = {
					is_ship_size = enclave_pirate_mercenary_station
				}
				solar_system = {
					save_event_target_as = mercenary_enclave_system
					if = {
						limit = {
							exists = space_owner
						}
						space_owner = {
							save_event_target_as = mercenary_patron
						}
					}
				}
			}
			random_owned_fleet = {
				limit = {
					is_ship_class = shipclass_military
					is_leased = yes
				}
				controller = {
					save_event_target_as = current_client
				}
			}
		}
		# Without this immediate is not invoked when event runs in a special mode that allows AI to collect trade data
		run_in_ai_mode = yes
	}

	# Hostility options
	option = {
		name = EaC_civic_mechanic_events.205.i
		trigger = {
			is_hostile = event_target:mercenary_enclave_country
			# NOT = { is_homicidal = yes }
		}
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 2500
			}
		}
		add_resource = {
			energy = -2500
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				set_faction_hostility = {
					target = root
					set_neutral = yes
				}
				every_owned_fleet = {
					limit = {
						is_in_combat = yes
						solar_system = { is_same_value = event_target:mercenary_enclave_system }
					}
					clear_fleet_actions = this
					queue_actions = {
						repeat = {
							max_iterations = 1
							find_closest_planet = {
								found_planet = {
									orbit_planet = this
								}
							}
						}
					}
				}
			}
			every_owned_fleet = {
				limit = {
					is_in_combat = yes
					solar_system = { is_same_value = event_target:mercenary_enclave_system }
				}
				clear_fleet_actions = this
				queue_actions = {
					repeat = {
						max_iterations = 1
						find_closest_planet = {
							found_planet = {
								orbit_planet = this
							}
						}
					}
				}
			}
		}
	}

	# Hire fleet
	option = {
		name = EaC_civic_mechanic_events.205.a
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			event_target:mercenary_enclave_country = {
				NOT = { has_country_flag = fleet_commandeered }
				NOT = {
					any_owned_fleet = {
						is_ship_class = shipclass_military
						is_leased = yes
						controller = {
							is_same_value = root
						}
					}
				}
			}
			if = {
				limit = {
					is_ai = yes
				}
				NOT = { has_country_flag = merc_ai_delay }
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = EaC_civic_mechanic_events.205.tooltip.a
				event_target:mercenary_enclave_country = {
					NOT = {
						any_owned_fleet = {
							is_ship_class = shipclass_military
							is_leased = yes
							owner = {
								is_same_value = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = EaC_civic_mechanic_events.205.tooltip.b
				event_target:mercenary_enclave_country = {
					any_owned_fleet = {
						is_ship_class = shipclass_military
						any_controlled_ship = { is_damaged = no }
						fleet_power >= 500
					}
				}
			}
		}
		ai_trade_facility = {
			custom_tooltip = mercenary_tt_hirefleet
			offer_hire_mercenary_fleet = yes
			offer_prolong_fleet_contract = yes
			hidden_effect = {
				country_event = { id = EaC_civic_mechanic_events.210 }
			}
		}
	}
	# Manage hired fleet (extend loan, recall)
	option = {
		name = EaC_civic_mechanic_events.205.b
		custom_tooltip = mercenary_tt_managefleet
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			any_controlled_fleet = {
				is_ship_class = shipclass_military
				is_leased = yes
				owner = {
					is_same_value = event_target:mercenary_enclave_country
				}
				controller = {
					is_same_value = root
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.215 }
		}
	}
	# Mercenary Garrison starbase building
	option = {
		name = EaC_civic_mechanic_events.205.c
		custom_tooltip = mercenary_tt_garrison
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			NOT = { has_country_flag = pirate_mercenary_enclave_bought_pirate_mercenary_garrison }
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 30
				}
			}
		}
		allow = {
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 40
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.220 }
		}
	}

	# Tactical Appraisal
	option = {
		name = EaC_civic_mechanic_events.205.e
		custom_tooltip = mercenary_tt_tactical
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			OR = {
				any_country = {
					is_country_type = awakened_marauders
					has_communications = root
				}
				any_country = {
					OR = {
						is_country_type = gray
						is_country_type = gray_goo
					}
					has_communications = root
				}
				any_country = {
					is_country_type = swarm
					has_communications = root
				}
				any_country = {
					is_country_type = extradimensional
					has_communications = root
				}
				any_country = {
					is_country_type = ai_empire
					has_communications = root
				}
				OR = {
					any_country = {
						is_country_type = awakened_synth_queen
						has_communications = root
					}
					OR = {
						has_special_project = THE_SYNTH_QUEENS_OUTPOST_AMBUSH
						has_special_project = THE_SYNTH_QUEENS_CONVOY_AMBUSH
					}
				}
			}
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 50
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.240 }
		}
	}

	# Recruit Armies
	option = {
		name = EaC_civic_mechanic_events.205.f
		custom_tooltip = mercenary_tt_hirearmies
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
		}
		allow = {
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 20
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.270 }
		}
	}

	# Mercenary Logistic Services
	option = {
		name = EaC_civic_mechanic_events.205.g
		custom_tooltip = mercenary_tt_logistic
		trigger = {
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 20
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = EaC_civic_mechanic_events.205.g.tooltip
				NOT = {
					has_modifier = mercenary_enclave_logistic_help
				}
			}
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 30
				}
			}
		}

		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.2030 }
		}
	}

	# Patron Panel
	option = {
		name = EaC_civic_mechanic_events.205.h
		custom_tooltip = mercenary_tt_patron
		trigger = {
			NOT = {
				has_civic = civic_military_dictatorship_corporate
				has_civic = civic_criminal_heritage
			}
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			exists = event_target:mercenary_patron
			event_target:mercenary_patron = {
				is_same_empire = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.280 }
		}
	}
	# Is Pirate Lord
	option = {
		name = EaC_civic_mechanic_events.205.j
		custom_tooltip = mercenary_tt_patron
		trigger = {
			has_civic = civic_military_dictatorship_corporate
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			exists = event_target:mercenary_patron
			event_target:mercenary_patron = {
				is_same_empire = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.280 }
		}
	}

	# Is Criminal Heritage
	option = {
		name = EaC_civic_mechanic_events.205.k
		custom_tooltip = mercenary_tt_patron
		trigger = {
			has_civic = civic_criminal_heritage
			NOR = {
				is_hostile = event_target:mercenary_enclave_country
				# is_homicidal = yes
			}
			exists = event_target:mercenary_patron
			event_target:mercenary_patron = {
				is_same_empire = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.280 }
		}
	}

	# Cease dialog
	option = {
		name = GOODBYE
		trigger = {
			NOT = {
				is_hostile = event_target:mercenary_enclave_country
			}
		}
		default_hide_option = yes
	}

	after = {
		hidden_effect = {
			set_country_flag = mercenary_enclave_diplomacy_engaged
		}
	}
}

# Mercenary Enclave: HIRE FLEET
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.210
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.210.desc

	immediate = {
		event_target:mercenary_enclave_country = {
			if = {
				limit = {
					count_owned_leader = {
						count = 0
						limit = {
							leader_class = commander
							is_councilor = no
							is_ruler = no
						}
					}
				}
				create_leader = {
					class = commander
					species = event_target:mercenary_enclave_species
					name = random
					randomize_traits = no
					event_leader = yes
					skill = 3
					traits = {
						trait = leader_trait_mercenary_warrior
						trait = leader_trait_aggressive
						trait = leader_trait_corsair
					}
				}
			}
			random_owned_leader = {
				limit = {
					leader_class = commander
					is_councilor = no
					is_ruler = no
				}
				save_event_target_as = mercenary_admiral
				set_immortal = yes
			}
			# Can hire only the main fleet
			ordered_controlled_fleet = {
				limit = {
					is_ship_class = shipclass_military
					is_leased = no
				}
				position = 0
				order_by = trigger:fleet_power
				save_event_target_as = mercenary_fleet
				assign_leader = event_target:mercenary_admiral
				set_name = {
					key = NAME_Mercenary_Fleet
					variable_string = "[event_target:mercenary_enclave_country.GetName]"
				}
				set_fleet_settings = {
					can_change_leader = no
				}
			}
		}
		# Without this the immediate is not invoked when the event runs in the special mode that allows AI to collect trade data
		run_in_ai_mode = yes
	}

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	option = {
		name = DEAL
		ai_trade_facility = {
			offer_hire_mercenary_fleet = yes
			info_gathering = {
				get_trade_data = { target = event_target:mercenary_enclave_country }
			}
			option_selection = {
				if = {
					limit = {
						is_offer_terms_actual = { target = event_target:mercenary_enclave_country }
					}
					make_special_trade = { target = event_target:mercenary_enclave_country }
					set_country_flag = mercenary_enclave_rented_fleet # For tracking returning customers
					event_target:mercenary_enclave_country = {
						add_trust = {
							who = root
							amount = 15
						}
					}
				}
			}
			allow = {
				can_afford_special_offer = { target = event_target:mercenary_enclave_country }
			}
		}
		custom_tooltip = opinion15
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.211 }
		}
	}

	option = {
		name = GOODBYE
		default_hide_option = yes
	}
}

# Mercenary Enclave: THANKS FOR RENTAL
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.211
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.211.desc
}

# Mercenary Enclave: MANAGE HIRED FLEET
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.215
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.215.desc

	immediate = {
		random_controlled_fleet = {
			limit = {
				is_ship_class = shipclass_military
				is_leased = yes
			}
			save_event_target_as = mercenary_fleet
		}
		# Without this immediate is not invoked when event runs in a special mode that allows AI to collect trade data
		run_in_ai_mode = yes
	}

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Extend the hire
	option = {
		name = EaC_civic_mechanic_events.215.b
		ai_trade_facility = {
			offer_prolong_fleet_contract = yes
			info_gathering = {
				get_trade_data = { target = event_target:mercenary_enclave_country }
			}
			option_selection = {
				if = {
					limit = {
						is_offer_terms_actual = { target = event_target:mercenary_enclave_country }
					}
					make_special_trade = { target = event_target:mercenary_enclave_country }
					event_target:mercenary_enclave_country = {
						add_trust = {
							who = root
							amount = 5
						}
					}
				}
			}
			allow = {
				can_afford_special_offer = { target = event_target:mercenary_enclave_country }
			}
		}
		custom_tooltip = opinion5
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Terminate Contract
	option = {
		name = EaC_civic_mechanic_events.215.c
		hidden_effect = {
			event_target:mercenary_fleet = {
				end_fleet_contract = {
					initiator = root
					reason = cancelled
				}
			}
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Goodbye
	option = {
		name = GOODBYE
		default_hide_option = yes
	}
}

# Mercenary Enclave: MERCENARY GARRISON starbase building
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.220
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.220.desc

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Buy the license to install garrisons
	option = {
		name = DEAL
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
		}
		add_resource = { energy = -1000 }
		custom_tooltip = opinion15
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 15
				}
				set_country_flag = pirate_mercenary_garrison@root
			}
			set_country_flag = pirate_mercenary_enclave_bought_pirate_mercenary_garrison
			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}
	option = {
		name = TOOPOOR
		trigger = {
			has_country_resource = { type = energy amount < 1000 }
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	option = {
		name = GOODBYE
		default_hide_option = yes
	}
}

# Mercenary Enclave: THANKS FOR PURCHASE
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.225
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.225.desc
}

# Mercenary Enclave: Expand Mercenary Fleet
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.235
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = {
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_1 }
			}
		}
		text = EaC_civic_mechanic_events.235.1.desc
	}
	desc = {
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
				has_modifier = mercenary_fleet_size_upgrade_1
			}
		}
		text = EaC_civic_mechanic_events.235.2.desc
	}
	desc = {
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_3 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		text = EaC_civic_mechanic_events.235.3.desc
	}
	desc = {
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_3
			}
		}
		text = EaC_civic_mechanic_events.235.4.desc
	}
	desc = {
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_5 }
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		text = EaC_civic_mechanic_events.235.5.desc
	}

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		default_hide_option = yes
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# First Increase
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_1 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
			has_country_resource = { type = alloys amount >= 500 }
		}
		add_resource = { energy = -1000 alloys = -500 }
		custom_tooltip = opinion20
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
				add_modifier = {
					modifier = mercenary_fleet_size_upgrade_1
					days = -1
				}
				upgrade_pirate_mercenary_starbase = {
					TIER = 1
				}
			}
			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}
	# Second Increase
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
				has_modifier = mercenary_fleet_size_upgrade_1
			}
		}
		allow = {
		has_country_resource = { type = energy amount >= 2500 }
			has_country_resource = { type = alloys amount >= 1250 }
		}
		add_resource = { energy = -2500 alloys = -1250 }
		custom_tooltip = opinion20
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
				add_modifier = {
					modifier = mercenary_fleet_size_upgrade_2
					days = -1
				}
				upgrade_pirate_mercenary_starbase = {
					TIER = 2
				}
			}
			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}
	# Third Increase
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_3 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		allow = {
			# Opinion trigger ?
			has_country_resource = { type = energy amount >= 5500 }
			has_country_resource = { type = alloys amount >= 2750 }
		}
		add_resource = { energy = -5500 alloys = -2750 }
		custom_tooltip = opinion20
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
				add_modifier = {
					modifier = mercenary_fleet_size_upgrade_3
					days = -1
				}
				upgrade_pirate_mercenary_starbase = {
					TIER = 3
				}
			}
			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}
	# Fourth Increase
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_3
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 10000 }
			has_country_resource = { type = alloys amount >= 5000 }
		}
		add_resource = { energy = -10000 alloys = -5000 }
		custom_tooltip = opinion20
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
				add_modifier = {
					modifier = mercenary_fleet_size_upgrade_4
					days = -1
				}
				upgrade_pirate_mercenary_starbase = {
					TIER = 4
				}
			}
			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}
	# Fifth Increase
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_5 }
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 13000 }
			has_country_resource = { type = alloys amount >= 6500 }
		}
		add_resource = { energy = -13000 alloys = -6500 }
		custom_tooltip = opinion20
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
				add_modifier = {
					modifier = mercenary_fleet_size_upgrade_5
					days = -1
				}
				upgrade_pirate_mercenary_starbase = {
					TIER = 5
				}
				set_country_flag = maximally_effective_achievement
			}
			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}
}

# Mercenary Enclave: TACTICAL APPRAISAL
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.240
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.240.desc

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Khan
	option = {
		name = EaC_civic_mechanic_events.240.a
		trigger = {
			NOT = { has_modifier = tactic_v_khan }
			any_country = {
				is_country_type = awakened_marauders
				has_communications = root
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 1500 }
		}
		add_resource = { energy = -1500 }
		add_modifier = {
					modifier = tactic_v_khan
					days = -1
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.245 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.240.a
		trigger = {
			has_modifier = tactic_v_khan
			any_country = {
				is_country_type = awakened_marauders
				has_communications = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.245 }
		}
	}

	# Gray Tempest
	option = {
		name = EaC_civic_mechanic_events.240.b
		trigger = {
			NOT = { has_modifier = tactic_v_gray }
			has_global_flag = gray_goo_crisis_active
			any_country = {
				OR = {
					is_country_type = gray
					is_country_type = gray_goo
				}
				has_communications = root
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 1500 }
		}
		add_resource = { energy = -1500 }
		add_modifier = {
			modifier = tactic_v_gray
			days = -1
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.250 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.240.b
		trigger = {
			has_modifier = tactic_v_gray
			has_global_flag = gray_goo_crisis_active
			any_country = {
				OR = {
					is_country_type = gray
					is_country_type = gray_goo
				}
				has_communications = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.250 }
		}
	}

	# Prethoryn Swarm
	option = {
		name = EaC_civic_mechanic_events.240.c
		trigger = {
			NOT = { has_modifier = tactic_v_swarm }
			any_country = {
				is_country_type = swarm
				has_communications = root
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 5000 }
		}
		add_resource = { energy = -5000 }
		add_modifier = {
					modifier = tactic_v_swarm
					days = -1
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.255 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.240.c
		trigger = {
			has_modifier = tactic_v_swarm
			any_country = {
				is_country_type = swarm
				has_communications = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.255 }
		}
	}

	# Unbidden Extradimensional
	option = {
		name = EaC_civic_mechanic_events.240.d
		trigger = {
			NOT = { has_modifier = tactic_v_extradimensional }
			any_country = {
				is_country_type = extradimensional
				has_communications = root
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 5000 }
		}
		add_resource = { energy = -5000 }
		add_modifier = {
					modifier = tactic_v_extradimensional
					days = -1
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.260 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.240.d
		trigger = {
			has_modifier = tactic_v_extradimensional
			any_country = {
				is_country_type = extradimensional
				has_communications = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.260 }
		}
	}

	# Contingency
	option = {
		name = EaC_civic_mechanic_events.240.e
		trigger = {
			NOT = { has_modifier = tactic_v_ai_empire }
			any_country = {
				is_country_type = ai_empire
				has_communications = root
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 5000 }
		}
		add_resource = { energy = -5000 }
		add_modifier = {
					modifier = tactic_v_ai_empire
					days = -1
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.265 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.240.e
		trigger = {
			has_modifier = tactic_v_ai_empire
			any_country = {
				is_country_type = ai_empire
				has_communications = root
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.265 }
		}
	}

	# Cetana
	option = {
		name = EaC_civic_mechanic_events.240.f
		trigger = {
			NOT = { has_modifier = tactic_v_synth_queen }
			OR = {
				any_country = {
					is_country_type = awakened_synth_queen
					has_communications = root
				}
				OR = {
					has_special_project = THE_SYNTH_QUEENS_OUTPOST_AMBUSH
					has_special_project = THE_SYNTH_QUEENS_CONVOY_AMBUSH
				}
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 5000 }
		}
		add_resource = { energy = -5000 }
		add_modifier = {
			modifier = tactic_v_synth_queen
			days = -1
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.266 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.240.f
		trigger = {
			has_modifier = tactic_v_synth_queen
			OR = {
				any_country = {
					is_country_type = awakened_synth_queen
					has_communications = root
				}
				OR = {
					has_special_project = THE_SYNTH_QUEENS_OUTPOST_AMBUSH
					has_special_project = THE_SYNTH_QUEENS_CONVOY_AMBUSH
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.266 }
		}
	}
}

## Tactical Appraisal Events
#Khan
country_event = {
	id = EaC_civic_mechanic_events.245
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.245.desc
}
# Gray Tempest
country_event = {
	id = EaC_civic_mechanic_events.250
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.250.desc
}
# Prethoryn
country_event = {
	id = EaC_civic_mechanic_events.255
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.255.desc
}
# Unbidden
country_event = {
	id = EaC_civic_mechanic_events.260
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.260.desc
}
# Contingency
country_event = {
	id = EaC_civic_mechanic_events.265
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.265.desc
}
# Synth Queen
country_event = {
	id = EaC_civic_mechanic_events.266
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	desc = EaC_civic_mechanic_events.266.desc
}

# Mercenary EaC_civic_mechanic_events: HIRE ARMIES
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.270
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.270.desc

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Small Army
	option = {
		name = EaC_civic_mechanic_events.270.a
		trigger = {
			NOT = { event_target:mercenary_enclave_country = { has_country_flag = small_merc_army_hired } }
		}
		allow = {
			has_country_resource = { type = energy amount >= 600 }
		}
		add_resource = { energy = -600  }
		custom_tooltip = small_merc_army_hire
		custom_tooltip = opinion5
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				set_timed_country_flag = { flag = small_merc_army_hired years = 1 }
				add_trust = {
					who = root
					amount = 5
				}
			}

			create_fleet = {
				effect = {
					set_owner = root
					while = {
						count = 5
						create_army_transport = {
							army_type = "mercenary_army"
							army_name = "NAME_military_contractors"
							species = event_target:mercenary_enclave_species
						}
					}
					set_location = {
						target = root.capital_scope.solar_system
					}
				}
			}

			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Small Mecha Army
	option = {
		name = EaC_civic_mechanic_events.270.b
		trigger = {
			NOT = { event_target:mercenary_enclave_country = { has_country_flag = small_mecha_merc_army_hired } }
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 1200 }
		}
		add_resource = { energy = -1200  }
		custom_tooltip = small_mecha_merc_army_hire
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				set_timed_country_flag = { flag = small_mecha_merc_army_hired years = 1 }
				add_trust = {
					who = root
					amount = 10
				}
			}

			create_fleet = {
				effect = {
					set_owner = root
					while = {
						count = 5
						create_army_transport = {
							army_type = "mecha_army"
							army_name = "NAME_mechawarrior_contractors"
							species = event_target:mercenary_enclave_species
						}
					}
					set_location = {
						target = root.capital_scope.solar_system
					}
				}
			}

			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Medium Army
	option = {
		name = EaC_civic_mechanic_events.270.c
		trigger = {
			NOT = { event_target:mercenary_enclave_country = { has_country_flag = medium_merc_army_hired } }
		}
		allow = {
			has_country_resource = { type = energy amount >= 1100 }
		}
		add_resource = { energy = -1100  }
		custom_tooltip = medium_merc_army_hire
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				set_timed_country_flag = { flag = medium_merc_army_hired months = 18 }
				add_trust = {
					who = root
					amount = 10
				}
			}

			create_fleet = {
				effect = {
					set_owner = root
					while = {
						count = 10
						create_army_transport = {
							army_type = "mercenary_army"
							army_name = "NAME_military_contractors"
							species = event_target:mercenary_enclave_species
						}
					}
					set_location = {
						target = root.capital_scope.solar_system
					}
				}
			}

			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Medium Mecha Army
	option = {
		name = EaC_civic_mechanic_events.270.d
		trigger = {
			NOT = { event_target:mercenary_enclave_country = { has_country_flag = medium_mecha_merc_army_hired } }
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 2300 }
		}
		add_resource = { energy = -2300  }
		custom_tooltip = medium_mecha_merc_army_hire
		custom_tooltip = opinion15
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				set_timed_country_flag = { flag = medium_mecha_merc_army_hired years = 2 }
				add_trust = {
					who = root
					amount = 15
				}
			}

			create_fleet = {
				effect = {
					set_owner = root
					while = {
						count = 10
						create_army_transport = {
							army_type = "mecha_army"
							army_name = "NAME_mechawarrior_contractors"
							species = event_target:mercenary_enclave_species
						}
					}
					set_location = {
						target = root.capital_scope.solar_system
					}
				}
			}

			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Large Army
	option = {
		name = EaC_civic_mechanic_events.270.e
		trigger = {
			NOT = { event_target:mercenary_enclave_country = { has_country_flag = large_merc_army_hired } }
		}
		allow = {
			has_country_resource = { type = energy amount >= 2000 }
		}
		add_resource = { energy = -2000  }
		custom_tooltip = large_merc_army_hire
		custom_tooltip = opinion15
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				set_timed_country_flag = { flag = large_merc_army_hired years = 3 }
				add_trust = {
					who = root
					amount = 15
				}
			}

			create_fleet = {
				effect = {
					set_owner = root
					while = {
						count = 15
						create_army_transport = {
							army_type = "mercenary_army"
							army_name = "NAME_military_contractors"
							species =event_target:mercenary_enclave_species
						}
					}
					set_location = {
						target = root.capital_scope.solar_system
					}
				}
			}


			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}
}

# Merc Pays Back Patron
country_event = {
	id = EaC_civic_mechanic_events.275
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Check who owns the system the enclave is in and register them as the target for the payment event.
		random_owned_fleet = {
			limit = {
				is_ship_size = enclave_pirate_mercenary_station
			}
			solar_system = {
				if = {
					limit = {
						exists = space_owner
					}
					space_owner = {
						save_event_target_as = mercenary_patron
					}
				}
			}
		}
		root = {
			save_event_target_as = mercenary_enclave_country
		}
		if = {
			limit = {
				exists = event_target:mercenary_patron
			}
			event_target:mercenary_patron = {
				random_list = {
					24 = { country_event = { id = EaC_civic_mechanic_events.2000 } }
					24 = { country_event = { id = EaC_civic_mechanic_events.2005 } }
					24 = { country_event = { id = EaC_civic_mechanic_events.2010 } }
					24 = {
						modifier = {
							factor = 0
							event_target:mercenary_patron = { used_naval_capacity_percent > 0.95 }
						}
						country_event = { id = EaC_civic_mechanic_events.2015 }
					}
					2 = { country_event = { id = EaC_civic_mechanic_events.2020 } }
					2 = { country_event = { id = EaC_civic_mechanic_events.2025 } }
				}
			}
		}
	}

	after = {
		start_situation = {
			type = pirate_mercenary_dividends
			target = root
		}
		destroy_situation = from
	}
}

# Mercenary Enclave: PATRON PANEL
# This = player country; event_target:mercenary_enclave_country = enclave country
country_event = {
	id = EaC_civic_mechanic_events.280
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = {
		trigger = {
			root = {
				OR = {
					has_civic = civic_military_dictatorship_corporate
					AND = {
						has_civic = civic_criminal_heritage
						has_civic = civic_crusader_spirit_corporate
					}
				}
				their_opinion = { who = event_target:mercenary_enclave_country value > 79 }
			}
		}
		text = "EaC_civic_mechanic_events.280.d.desc"
	}
	desc = {
		trigger = {
			root = {
				OR = {
					has_civic = civic_military_dictatorship_corporate
					AND = {
						has_civic = civic_criminal_heritage
						has_civic = civic_crusader_spirit_corporate
					}
				}
				their_opinion = { who = event_target:mercenary_enclave_country value < 80 }
				their_opinion = { who = event_target:mercenary_enclave_country value > 30 }
			}
		}
		text = "EaC_civic_mechanic_events.280.e.desc"
	}
	desc = {
		trigger = {
			root = {
				OR = {
					has_civic = civic_military_dictatorship_corporate
					AND = {
						has_civic = civic_criminal_heritage
						has_civic = civic_crusader_spirit_corporate
					}
				}
				their_opinion = { who = event_target:mercenary_enclave_country value < 29 }
				their_opinion = { who = event_target:mercenary_enclave_country value > -30 }
			}
		}
		text = "EaC_civic_mechanic_events.280.f.desc"
	}
	desc = {
		trigger = {
			root = {
				OR = {
					has_civic = civic_military_dictatorship_corporate
					AND = {
						has_civic = civic_criminal_heritage
						has_civic = civic_crusader_spirit_corporate
					}
				}
				their_opinion = { who = event_target:mercenary_enclave_country value < -31 }
			}
		}
		text = "EaC_civic_mechanic_events.280.g.desc"
	}
	desc = {
		trigger = {
			root = {
				if = {
					limit = { has_civic = civic_criminal_heritage }
					NOT = { has_valid_civic = civic_crusader_spirit_corporate }
				}
				else = { NOT = { has_valid_civic = civic_military_dictatorship_corporate } }
			}
		}
		text = EaC_civic_mechanic_events.280.a.desc
		text = EaC_civic_mechanic_events.280.b.desc
		text = EaC_civic_mechanic_events.280.c.desc
	}

	immediate = {
		event_target:mercenary_enclave_country = {
			random_owned_fleet = {
				limit = {
					is_ship_class = shipclass_military
					is_leased = yes
				}
				save_event_target_as = loaned_mercenary_fleet
			}
		}
	}

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Expand Mercenary Fleet
	option = {
		name = EaC_civic_mechanic_events.205.d
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_5 }
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = EaC_civic_mechanic_events.205.d.timeout
				event_target:mercenary_enclave_country = {
					NOT = { has_country_flag = upgraded_station }
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.235 }
		}
	}

	# Recall Fleet
	option = {
		name = EaC_civic_mechanic_events.280.b
		trigger = {
			exists = event_target:loaned_mercenary_fleet
			event_target:loaned_mercenary_fleet = {
				controller = {
					NOT = { is_same_value = root }
				}
			}
			event_target:mercenary_enclave_country ={
				NOT = { has_country_flag = fleet_commandeered }
			}
		}
		allow = {
			event_target:mercenary_enclave_country = {
				trust = {
					who = root
					value >= 80
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.285 }
		}
	}

	# Share Technology
	option = {
		name = EaC_civic_mechanic_events.280.c
		allow = {
			custom_tooltip = {
				fail_text = EaC_civic_mechanic_events.280.c.timeout
				event_target:mercenary_enclave_country = {
					NOT = { has_country_flag = updating_databanks }
				}
			}
		}
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.2040 }
		}
	}
}

# Mercenary Enclave: RECALL FLEET
country_event = {
	id = EaC_civic_mechanic_events.285
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.285.desc

	immediate = {
		event_target:loaned_mercenary_fleet = {
			controller = {
				save_event_target_as = current_mercenary_client
			}
		}
	}

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Multiple options to scale costs with fleet size
	# Size 0
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_1 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 1500 }
			has_country_resource = { type = influence amount >= 50 }
		}
		add_resource = { energy = -1500 influence = -50 }
		custom_tooltip = EaC_civic_mechanic_events.285.tooltip
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = -15
				}
				set_country_flag = fleet_commandeered

				country_event = { id = EaC_civic_mechanic_events.289 days = 90 } # In three months, bring fleet back for repairs
			}
			event_target:current_mercenary_client = {
				country_event = { id = EaC_civic_mechanic_events.294 } # Three months warning and refund
			}
		}
	}
	# Size 1
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_1
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 3000 }
			has_country_resource = { type = influence amount >= 75 }
		}
		add_resource = { energy = -3000 influence = -75 }
		custom_tooltip = EaC_civic_mechanic_events.285.tooltip
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = -15
				}
				set_country_flag = fleet_commandeered

				country_event = { id = EaC_civic_mechanic_events.289 days = 180 } # In six months, give fleet to patron
			}
			event_target:current_mercenary_client = {
				country_event = { id = EaC_civic_mechanic_events.295 } # Three months warning and refund
			}
		}
	}
	# Size 2
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_2
				NOT = { has_modifier = mercenary_fleet_size_upgrade_3 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 6000 }
			has_country_resource = { type = influence amount >= 100 }
		}
		add_resource = { energy = -6000 influence = -100 }
		custom_tooltip = EaC_civic_mechanic_events.285.tooltip
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = -15
				}
				set_country_flag = fleet_commandeered

				country_event = { id = EaC_civic_mechanic_events.289 days = 180 } # In six months, give fleet to patron
			}
			event_target:current_mercenary_client = {
				country_event = { id = EaC_civic_mechanic_events.296 } # Three months warning and refund
			}
		}
	}
	# Size 3
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_3
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 10000 }
			has_country_resource = { type = influence amount >= 125 }
		}
		add_resource = { energy = -10000 influence = -125 }
		custom_tooltip = EaC_civic_mechanic_events.285.tooltip
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = -15
				}
				set_country_flag = fleet_commandeered

				country_event = { id = EaC_civic_mechanic_events.289 days = 180 } # In six months, give fleet to patron
			}
			event_target:current_mercenary_client = {
				country_event = { id = EaC_civic_mechanic_events.297 } # Three months warning and refund
			}
		}
	}
	# Size 4
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
				NOT = { has_modifier = mercenary_fleet_size_upgrade_5 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 15000 }
			has_country_resource = { type = influence amount >= 150 }
		}
		add_resource = { energy = -15000 influence = -150 }
		custom_tooltip = EaC_civic_mechanic_events.285.tooltip
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = -15
				}
				set_country_flag = fleet_commandeered

				country_event = { id = EaC_civic_mechanic_events.289 days = 180 } # In six months, give fleet to patron
			}
			event_target:current_mercenary_client = {
				country_event = { id = EaC_civic_mechanic_events.298 } # Three months warning and refund
			}
		}
	}
	# Size 5
	option = {
		name = DEAL
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_5
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 22000 }
			has_country_resource = { type = influence amount >= 200 }
		}
		add_resource = { energy = -22000 influence = -200 }
		custom_tooltip = EaC_civic_mechanic_events.285.tooltip
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = -15
				}
				set_country_flag = fleet_commandeered

				country_event = { id = EaC_civic_mechanic_events.289 days = 180 } # In six months, give fleet to patron
			}
			event_target:current_mercenary_client = {
				country_event = { id = EaC_civic_mechanic_events.299 } # Three months warning and refund
			}
		}
	}

	option = {
		name = GOODBYE
		default_hide_option = yes
	}
}

# Mercenary Fleet Commandeered (Merc Side)
country_event = {
	id = EaC_civic_mechanic_events.289
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:loaned_mercenary_fleet
	}

	immediate = {
		random_owned_fleet = {
			limit = {
				is_ship_class = shipclass_military
				is_leased = yes
			}
			save_event_target_as = mercenary_fleet
		}
		random_owned_fleet = {
			limit = {
				is_ship_size = enclave_pirate_mercenary_station
			}
			solar_system = {
				save_event_target_as = mercenary_home_system
				space_owner = {
					save_event_target_as = mercenary_patron
				}
			}
		}
		root = {
			save_event_target_as = mercenary_enclave_country
		}
		event_target:mercenary_patron = {
			country_event = { id = EaC_civic_mechanic_events.290 days = 90 } # Transfer fleet to Patron. Wait three month to merge fleet with reinforcements and repair
		}
		event_target:mercenary_fleet = {
			end_fleet_contract = {
				initiator = event_target:mercenary_enclave_country
				reason = cancelled
			}
			remove_fleet_flag = fleet_on_loan@root
			set_location = {
				target = event_target:mercenary_home_system
			}
		}
	}
}

# Mercenary Fleet Commandeered (patron side)
country_event = {
	id = EaC_civic_mechanic_events.290
	title = EaC_civic_mechanic_events.290.name
	desc = EaC_civic_mechanic_events.290.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	immediate = {
		from = {
			if = {
				limit = {
					count_owned_leader = {
						count = 0
						limit = {
							leader_class = commander
							is_councilor = no
							is_ruler = no
						}
					}
				}
				create_leader = {
					class = commander
					species = event_target:mercenary_enclave_species
					name = random
					randomize_traits = no
					event_leader = yes
					skill = 3
					traits = {
						trait = leader_trait_mercenary_warrior
						trait = leader_trait_aggressive
						trait = leader_trait_corsair
					}
				}
			}
			random_owned_leader = {
				limit = {
					leader_class = commander
					is_councilor = no
					is_ruler = no
				}
				save_event_target_as = mercenary_admiral
			}
			ordered_controlled_fleet = {
				limit = {
					is_ship_class = shipclass_military
					is_leased = no
				}
				position = 0
				order_by = trigger:fleet_power
				save_event_target_as = mercenary_fleet
				assign_leader = event_target:mercenary_admiral
			}
			remove_country_flag = fleet_commandeered
			event_target:mercenary_fleet = {
				give_fleet = {
					controller = root
					days = 3600
				}
				set_timed_fleet_flag = {
					flag = fleet_on_loan@root
					years = 10
				}
			}
		}
		set_country_flag = mercenary_enclave_rented_fleet
	}

	option = {
		name = EXCELLENT
	}
}

# Mercenary Enclave: FLEET COMMANDEERED SIX MONTH WARNING AND REFUND
# Variants for mercenary tier and refund amount
#Tier 0
country_event = {
	id = EaC_civic_mechanic_events.294
	title = EaC_civic_mechanic_events.294.name
	desc = EaC_civic_mechanic_events.294.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		add_resource = { energy = 3000 }
	}
	option = {
		name = EaC_civic_mechanic_events.294.b
		add_resource = { energy = 3000 }
	}
}
#Tier 1
country_event = {
	id = EaC_civic_mechanic_events.295
	title = EaC_civic_mechanic_events.294.name
	desc = EaC_civic_mechanic_events.294.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		add_resource = { energy = 6000 }
	}
	option = {
		name = EaC_civic_mechanic_events.294.b
		add_resource = { energy = 6000 }
	}
}
#Tier 2
country_event = {
	id = EaC_civic_mechanic_events.296
	title = EaC_civic_mechanic_events.294.name
	desc = EaC_civic_mechanic_events.294.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		add_resource = { energy = 12000 }
	}
	option = {
		name = EaC_civic_mechanic_events.294.b
		add_resource = { energy = 12000 }
	}
}
#Tier 3
country_event = {
	id = EaC_civic_mechanic_events.297
	title = EaC_civic_mechanic_events.294.name
	desc = EaC_civic_mechanic_events.294.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		add_resource = { energy = 20000 }
	}
	option = {
		name = EaC_civic_mechanic_events.294.b
		add_resource = { energy = 20000 }
	}
}
#Tier 4
country_event = {
	id = EaC_civic_mechanic_events.298
	title = EaC_civic_mechanic_events.294.name
	desc = EaC_civic_mechanic_events.294.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		add_resource = { energy = 30000 }
	}
	option = {
		name = EaC_civic_mechanic_events.294.b
		add_resource = { energy = 30000 }
	}
}
#Tier 5
country_event = {
	id = EaC_civic_mechanic_events.299
	title = EaC_civic_mechanic_events.294.name
	desc = EaC_civic_mechanic_events.294.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		add_resource = { energy = 44000 }
	}
	option = {
		name = EaC_civic_mechanic_events.294.b
		add_resource = { energy = 44000 }
	}
}


# Additional Mercenary Events
# Mercenary Dividends

## Tech Reward
country_event = {
	id = EaC_civic_mechanic_events.2000
	title = EaC_civic_mechanic_events.2000.name
	desc = EaC_civic_mechanic_events.2000.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
	}
}
## Raw Resources Reward
country_event = {
	id = EaC_civic_mechanic_events.2005
	title = EaC_civic_mechanic_events.2000.name
	desc = EaC_civic_mechanic_events.2005.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = food
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = food
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
		add_monthly_resource_mult = {
			resource = food
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
	}
}
## Cash Reward
country_event = {
	id = EaC_civic_mechanic_events.2010
	title = EaC_civic_mechanic_events.2000.name
	desc = EaC_civic_mechanic_events.2010.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
	}
}
## Ships Reward
country_event = {
	id = EaC_civic_mechanic_events.2015
	title = EaC_civic_mechanic_events.2000.name
	desc = EaC_civic_mechanic_events.2015.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes

	immediate = {
		# Get Ships Design
		event_target:mercenary_enclave_country = {
			random_controlled_ship = {
				limit = { is_ship_size = corvette }
				save_event_target_as = mercenary_dividend_corvette
			}
			if = { # We don't really want them to give ships they don't have. But they must always be able to provide Corvettes.
				limit = {
					NOT = { exists = event_target:mercenary_dividend_corvette }
				}
				random_owned_design = {
					limit = { is_ship_size = corvette }
					save_event_target_as = mercenary_dividend_corvette
				}
			}
			random_controlled_ship = {
				limit = { is_ship_size = destroyer }
				save_event_target_as = mercenary_dividend_destroyer
			}
			random_controlled_ship = {
				limit = { is_ship_size = cruiser }
				save_event_target_as = mercenary_dividend_cruiser
			}
			random_controlled_ship = {
				limit = { is_ship_size = battleship }
				save_event_target_as = mercenary_dividend_battleship
			}
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		custom_tooltip = merc_enclave_grants_ships
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:mercenary_dividend_battleship
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 2
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 1
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_battleship
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else = {
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 6
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		custom_tooltip = merc_enclave_grants_ships
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:mercenary_dividend_battleship
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 4
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 2
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_battleship
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_cruiser
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 4
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_cruiser
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_destroyer
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 3
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_destroyer
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 6
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else = {
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 12
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		custom_tooltip = merc_enclave_grants_ships
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:mercenary_dividend_battleship
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 4
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 4
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_battleship
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_cruiser
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 4
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_cruiser
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 6
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_destroyer
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_destroyer
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 7
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_destroyer
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 6
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else = {
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 20
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
		}
	}
}
## Jackpot Reward
country_event = {
	id = EaC_civic_mechanic_events.2020
	title = EaC_civic_mechanic_events.2000.name
	desc = EaC_civic_mechanic_events.2020.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes
	trigger = {
		event_target:mercenary_enclave_country = {
			NOT = { has_modifier = merc_financial_troubles }
		}
	}

	immediate = {
		# Get Ships Design
		event_target:mercenary_enclave_country = {
			random_controlled_ship = {
				limit = { is_ship_size = corvette }
				save_event_target_as = mercenary_dividend_corvette
			}
			if = { # We don't really want them to give ships they don't have. But they must always be able to provide Corvettes.
				limit = {
					NOT = { exists = event_target:mercenary_dividend_corvette }
				}
				random_owned_design = {
					limit = { is_ship_size = corvette }
					save_event_target_as = mercenary_dividend_corvette
				}
			}
			random_controlled_ship = {
				limit = { is_ship_size = destroyer }
				save_event_target_as = mercenary_dividend_destroyer
			}
			random_controlled_ship = {
				limit = { is_ship_size = cruiser }
				save_event_target_as = mercenary_dividend_cruiser
			}
			random_controlled_ship = {
				limit = { is_ship_size = battleship }
				save_event_target_as = mercenary_dividend_battleship
			}
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		custom_tooltip = merc_enclave_grants_ships
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:mercenary_dividend_cruiser
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 1
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_cruiser
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else = {
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 3
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
		custom_tooltip = merc_enclave_grants_ships
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:mercenary_dividend_battleship
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 2
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 1
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_battleship
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_cruiser
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 2
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_cruiser
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_destroyer
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 2
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_destroyer
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 2
							create_ship = {
								name = random

								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else = {
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 6
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EXCELLENT
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
		custom_tooltip = merc_enclave_grants_ships
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:mercenary_dividend_battleship
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 4
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 2
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_battleship
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_cruiser
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 4
							create_ship = {
								name = random

								design = event_target:mercenary_dividend_cruiser
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					exists = event_target:mercenary_dividend_destroyer
				}
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 3
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_destroyer
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
						while = {
							count = 6
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
			else = {
				create_fleet = {
					effect = {
						set_owner = root
						while = {
							count = 12
							create_ship = {
								name = random
								design = event_target:mercenary_dividend_corvette
								graphical_culture = event_target:mercenary_enclave_country
							}
						}
					}
				}
			}
		}
	}
}
## Sadpot
country_event = {
	id = EaC_civic_mechanic_events.2025
	title = EaC_civic_mechanic_events.2000.name
	desc = EaC_civic_mechanic_events.2025.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes

	option = {
		name = EaC_civic_mechanic_events.2025.a
		add_monthly_resource_mult = {
			resource = energy
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_modifier = {
					modifier = merc_financial_troubles
					years = 10
				}
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2025.b
		event_target:mercenary_enclave_country = {
			ruler = {
				kill_leader = { show_notification = no}
			}
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_modifier = {
					modifier = merc_financial_troubles
					days = 1000
				}
				create_leader = {
					class = commander
					species = owner_species
					event_leader = yes
					name = random
					skill = 1
					traits = {
						trait = leader_trait_mercenary_warrior
						trait = leader_trait_corsair
					}
				}
				set_leader = last_created_leader
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2025.c
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_2 }
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
		}
		add_resource = { energy = -1000 influence = 50 }
		event_target:mercenary_enclave_country = {
			add_trust = {
				who = root
				amount = 20
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2025.c
		trigger = {
			event_target:mercenary_enclave_country = {
				NOT = { has_modifier = mercenary_fleet_size_upgrade_4 }
				has_modifier = mercenary_fleet_size_upgrade_2
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 2500 }
		}
		add_resource = { energy = -2500 influence = 75 }
		event_target:mercenary_enclave_country = {
			add_trust = {
				who = root
				amount = 20
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2025.c
		trigger = {
			event_target:mercenary_enclave_country = {
				has_modifier = mercenary_fleet_size_upgrade_4
			}
		}
		allow = {
			has_country_resource = { type = energy amount >= 10000 }
		}
		add_resource = { energy = -10000 influence = 100 }
		event_target:mercenary_enclave_country = {
			add_trust = {
				who = root
				amount = 20
			}
		}
	}
}

# Logistic service
country_event = {
	id = EaC_civic_mechanic_events.2030
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.2030.desc

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	option = {
		name = DEAL
		trigger = { max_naval_capacity < 76 }
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
		}
		add_resource = { energy = -1000 }
		custom_tooltip = opinion10
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 75
			max_naval_capacity < 151
		}
		allow = {
			has_country_resource = { type = energy amount >= 1500 }
		}
		add_resource = { energy = -1500 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 150
			max_naval_capacity < 276
		}
		allow = {
			has_country_resource = { type = energy amount >= 2500 }
		}
		add_resource = { energy = -2500 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 275
			max_naval_capacity < 451
		}
		allow = {
			has_country_resource = { type = energy amount >= 4000 }
		}
		add_resource = { energy = -4000 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 450
		}
		allow = {
		has_country_resource = { type = energy amount >= 6000 }
		}
		add_resource = { energy = -5000 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}
}

# Continue Logistic Services?
country_event = {
	id = EaC_civic_mechanic_events.2035
	title = EaC_civic_mechanic_events.2035.name
	desc = EaC_civic_mechanic_events.2035.desc
	picture = GFX_evt_mercenary_enclave
	show_sound = evn_ove_mercenary_enclave
	is_triggered_only = yes

	option = {
		name = DEAL
		trigger = { max_naval_capacity < 76 }
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
		}
		add_resource = { energy = -1000 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 75
			max_naval_capacity < 151
		}
		allow = {
			has_country_resource = { type = energy amount >= 1500 }
		}
		add_resource = { energy = -1500 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 150
			max_naval_capacity < 276
		}
		allow = {
			has_country_resource = { type = energy amount >= 2500 }
		}
		add_resource = { energy = -2500 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 275
			max_naval_capacity < 451
		}
		allow = {
			has_country_resource = { type = energy amount >= 4000 }
		}
		add_resource = { energy = -4000 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = DEAL
		trigger = {
			max_naval_capacity > 450
		}
		allow = {
		has_country_resource = { type = energy amount >= 6000 }
		}
		add_resource = { energy = -5000 }
		custom_tooltip = opinion20
		add_modifier = {
			modifier = mercenary_enclave_logistic_help
			years = 10
		}
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 20
				}
			}
			country_event = { id = EaC_civic_mechanic_events.2035 days = 3600 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2035.a
	}
}

# Mercenary Enclave: SHARE TECHNOLOGY
country_event = {
	id = EaC_civic_mechanic_events.2040
	base = EaC_civic_mechanic_events.205
	desc_clear = yes
	option_clear = yes

	desc = EaC_civic_mechanic_events.2040.desc

	# Discuss another matter (return to menu)
	option = {
		name = EaC_civic_mechanic_events.215.a
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}

	# Offer technology for a small fee
	option = {
		name = DEAL
		add_resource = { energy = 1000 }
		custom_tooltip = opinion15
		custom_tooltip = EaC_civic_mechanic_events.2040.a.tt
		hidden_effect = {
			event_target:mercenary_enclave_country = {
				add_trust = {
					who = root
					amount = 15
				}
				set_timed_country_flag = { flag = updating_databanks days = @ShareTechTimer }
				set_saved_date = {
					key = updating_databanks_timer
					days_from_present = @ShareTechTimer
					expires = @ShareTechTimer
				}
				copy_techs_from = { target = root }
			}

			country_event = { id = EaC_civic_mechanic_events.225 }
		}
	}

	option = {
		name = GOODBYE
		default_hide_option = yes
	}
}

# Khan hires available mercs
event = {
	id = EaC_civic_mechanic_events.2045
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = awakened_marauders
		}
		NOT = { has_global_flag = great_khan_dead }
		any_country = {
			is_country_type = enclave_mercenary
			has_civic = civic_pirate_mercenary_enclave
			NOT = {
				any_owned_fleet = {
					is_leased = yes
				}
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = awakened_marauders
			}
			save_event_target_as = khan_country
			random_owned_fleet = {
				limit = {
					has_fleet_flag = khan_fleet
				}
				save_event_target_as = khan_fleet
			}
		}
		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				has_civic = civic_pirate_mercenary_enclave
				NOT = {
					any_owned_fleet = {
						is_leased = yes
					}
				}
			}
			save_event_target_as = mercenary_enclave_country
			# Check if the patron is a player to give them a chance at a counteroffer
			if = {
				limit = {
					event_target:mercenary_enclave_country = {
						any_owned_fleet = {
							is_ship_size = enclave_pirate_mercenary_station
							solar_system = {
								exists = space_owner
								space_owner = {
									is_ai = yes
								}
							}
						}
					}
				}
				# Khan hires only the main fleet
				ordered_controlled_fleet = {
					limit = {
						is_ship_class = shipclass_military
						is_leased = no
					}
					position = 0
					order_by = trigger:fleet_power
					save_event_target_as = mercenary_fleet
				}
				event_target:mercenary_fleet = {
					give_fleet = { controller = event_target:khan_country days = 1510 }
					set_name = {
						key = NAME_Mercenary_Fleet
						variable_string = "[event_target:mercenary_enclave_country.GetName]"
					}
					auto_follow_fleet = {
 						target = event_target:khan_fleet
					}
				}
				set_country_flag = mercenary_enclave_rented_fleet
			}
			else = {
				event_target:mercenary_enclave_country = {
					random_owned_fleet = {
						limit = {
							is_ship_size = enclave_pirate_mercenary_station
							exists = solar_system
						}
						solar_system = {
							if = {
								limit = {
									exists = space_owner
								}
								space_owner = {
									country_event = { id = EaC_civic_mechanic_events.2050 }
								}
							}
						}
					}
				}
			}
		}
	}
}

country_event = {
	id = EaC_civic_mechanic_events.2050
	title = EaC_civic_mechanic_events.2050.name
	desc = EaC_civic_mechanic_events.2050.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = { # Yes, open diplomacy
		name = EaC_civic_mechanic_events.2050.a
		custom_tooltip = EaC_civic_mechanic_events.2050.a.tt
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
			event_target:khan_country = {
				country_event = { id = EaC_civic_mechanic_events.2051 days = 60 }
			}
		}
	}

	option = { # Nope
		name = EaC_civic_mechanic_events.2050.b
		custom_tooltip = EaC_civic_mechanic_events.2050.a.tt
		hidden_effect = {
			event_target:khan_country = {
				country_event = { id = EaC_civic_mechanic_events.2051 days = 60 }
			}
		}
	}

	option = { # Nope, but rude
		name = EaC_civic_mechanic_events.2050.c
		custom_tooltip = EaC_civic_mechanic_events.2050.b.tt
		hidden_effect = {
			event_target:khan_country = {
				country_event = { id = EaC_civic_mechanic_events.2051 days = 7 }
			}
		}
	}
}

country_event = {
	id = EaC_civic_mechanic_events.2051
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		event_target:mercenary_enclave_country = {
			NOT = {
				any_owned_fleet = {
					is_leased = yes
				}
			}
		}
	}

	immediate = {
		event_target:mercenary_enclave_country = {
			ordered_controlled_fleet = {
				limit = {
					is_ship_class = shipclass_military
					is_leased = no
				}
				position = 0
				order_by = trigger:fleet_power
				save_event_target_as = mercenary_fleet
			}
			event_target:mercenary_fleet = {
				give_fleet = { controller = event_target:khan_country days = 1510 }
				set_name = {
					key = NAME_Mercenary_Fleet
					variable_string = "[event_target:mercenary_enclave_country.GetName]"
				}
				auto_follow_fleet = {
 					target = event_target:khan_fleet
				}
			}
			set_country_flag = mercenary_enclave_rented_fleet
		}
	}
}

# Khan dies, mercenaries leave
event = {
	id = EaC_civic_mechanic_events.2055
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = great_khan_dead
		any_country = {
			is_country_type = enclave_mercenary
			has_civic = civic_pirate_mercenary_enclave
			any_owned_fleet = {
				is_leased = yes
				controller = {
					is_country_type = awakened_marauders
				}
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = awakened_marauders
			}
			save_event_target_as = khan_country
		}

		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				has_civic = civic_pirate_mercenary_enclave
				any_owned_fleet = {
					is_leased = yes
					controller = {
						is_country_type = awakened_marauders
					}
				}
			}
			random_owned_fleet ={
				limit = {
					is_leased = yes
					controller = {
						is_country_type = awakened_marauders
					}
				}
				end_fleet_contract = {
					initiator = event_target:khan_country
					reason = cancelled
				}
			}
			remove_country_flag = mercenary_enclave_rented_fleet
		}
	}
}

# Flag the enclave to block the AI from hiring mercs too quickly
fleet_event = {
	id = EaC_civic_mechanic_events.2058
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			has_civic = civic_mercenary_enclave
			NOT = {
				has_country_flag = merc_ai_delay
			}
		}
	}

	immediate = {
		fromfrom = {
			set_timed_country_flag = {
				flag = merc_ai_delay
				years = 1
			}
		}
	}
}

# Merc Fleet Lease Ended
fleet_event = {
	id = EaC_civic_mechanic_events.2059
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			is_ai = no
		}
		fromfrom = {
			has_civic = civic_mercenary_enclave
			has_civic = civic_pirate_mercenary_enclave
		}
	}

	immediate = {
		fromfrom = {
			save_event_target_as = mercenary_enclave_country
			# Failsafe to catch if fleets are no longer on loan
			remove_loaning_fleet_flag = yes
		}
		from = {
			country_event = { id = EaC_civic_mechanic_events.2060 }
		}
	}
}

country_event = {
	id = EaC_civic_mechanic_events.2060
	title = EaC_civic_mechanic_events.2060.name
	desc = EaC_civic_mechanic_events.2060.desc
	picture = GFX_evt_mercenary_fleet
	show_sound = evn_ove_mercenary_fleet
	is_triggered_only = yes

	option = { # Nope
		name = EaC_civic_mechanic_events.2060.a
	}

	option = { # Yes, open diplomacy
		name = EaC_civic_mechanic_events.2060.b
		hidden_effect = {
			country_event = { id = EaC_civic_mechanic_events.205 }
		}
	}
}

# Unemployed mercs return to merc station
event = {
	id = EaC_civic_mechanic_events.2065
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = enclave_mercenary
			has_civic = civic_pirate_mercenary_enclave
			any_owned_fleet = {
				is_leased = no
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				has_civic = civic_pirate_mercenary_enclave
				any_owned_fleet = {
					is_leased = no
				}
			}
			country_event = {id = EaC_civic_mechanic_events.2070 days = 5}
		}
	}
}

country_event = {
	id = EaC_civic_mechanic_events.2070
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_fleet = {
			is_leased = no
			exists = solar_system
			solar_system = {
				NOT = {
					any_ship_in_system = {
						is_ship_size = enclave_pirate_mercenary_station
					}
				}
			}
		}
	}

	immediate = {
		random_owned_fleet = {
			limit = {
				is_ship_size = enclave_pirate_mercenary_station
			}
			save_event_target_as = mercenary_enclave_station
		}
		ordered_controlled_fleet = {
			limit = {
				is_ship_class = shipclass_military
				is_leased = no
			}
			position = 0
			order_by = trigger:fleet_power
			auto_follow_fleet = {
				target = event_target:mercenary_enclave_station
			}
		}
	}
}

country_event = { # Assign an admiral to hired merc fleet if they lose theirs
	id = EaC_civic_mechanic_events.2075
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_civic = civic_mercenary_enclave
		has_civic = civic_pirate_mercenary_enclave
		any_owned_fleet = {
			is_leased = yes
			NOT = {
				exists = leader
			}
		}
	}

	immediate = {
		create_leader = {
			class = commander
			species = event_target:mercenary_enclave_species
			event_leader = yes
			name = random
			skill = 3
			traits = {
				trait = leader_trait_mercenary_warrior
				trait = leader_trait_corsair
			}
		}
		random_owned_fleet = {
			limit = {
				is_leased = yes
				NOT = {
					exists = leader
				}
			}
			assign_leader = last_created_leader
		}
	}
}

# This = fleet
# From = country that borrowed the fleet
# fromfrom = country that owns the fleet
# fromfromfrom = country that initiated the ending (the same as owner in a case of expiration)
fleet_event = {
	id = EaC_civic_mechanic_events.2080
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			has_civic = civic_mercenary_enclave
			has_civic = civic_pirate_mercenary_enclave
		}
	}

	immediate = {
		if = {
			limit = {
				exists = leader
			}
			leader = {
				set_owner = fromfrom
			}
		}
	}
}

# This = fleet
# From = country that borrowed the fleet
# fromfrom = country that owns the fleet
# Is fired immediately after fleet is leased out
fleet_event = {
	id = EaC_civic_mechanic_events.2085
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			has_civic = civic_mercenary_enclave
			has_civic = civic_pirate_mercenary_enclave
		}
	}

	immediate = {
		if = {
			limit = {
				exists = leader
			}
			leader = {
				set_leader_flag = hired_admiral_merc_leader
				set_owner = from
			}
		}
	}
}

# FROM = fleet
# THIS = SYSTEM
# FROM.owner = Country that owns it
# Is fired immediately after off world trading post module is removed
fleet_event = {
	id = EaC_civic_mechanic_events.2090
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		solar_system = { set_star_flag = EaC_civic_mechanic_events.pirate_enclave.offworld_trading_company.star_flag }
	}
}

# FROM = fleet
# THIS = SYSTEM
# FROM.owner = Country that owns it
# Is fired immediately after off world trading post module is removed
fleet_event = {
	id = EaC_civic_mechanic_events.2091
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		solar_system = { remove_star_flag = EaC_civic_mechanic_events.pirate_enclave.offworld_trading_company.star_flag }
	}
}

# EaC_civic_mechanic_events.3 - Crime & General Strike Mechanics
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#####																														#####
#####								GENERAL STRIKES & CRIME MECHANICS														#####
#####																														#####
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################

# Undgerground Labor Movement (Unemployment) (Reworked Criminal Underworld)
planet_event = {
	id = crime.1
	title = EaC_civic_mechanic_events.1.name
	desc = {
		trigger = {
			if = {
				limit = { owner = { is_gestalt = no } }
				text = EaC_civic_mechanic_events.1.desc

				if = {
					limit = { owner = { is_twisted_experimenters_empire = yes } }
					text = newline
					text = crime.1.desc.experimenters
				}
			}
			else_if = {
				limit = { owner = { is_hive_empire = yes } }
				text = crime.1.b.desc

				if = {
					limit = { owner = { is_twisted_experimenters_empire = yes } }
					text = newline
					text = crime.1.b.desc.experimenters
				}
			}
			else_if = {
				limit = { owner = { is_machine_empire = yes } }
				text = crime.1.c.desc
			}
		}
	}
	picture = {
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		picture = GFX_evt_dark_alley
	}
	picture = {
		trigger = {
			owner = { is_hive_empire = yes }
		}
		picture = GFX_evt_hive_mind
	}
	picture = {
		trigger = {
			owner = { is_machine_empire = yes }
		}
		picture = GFX_evt_glitchy_matrix
	}
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		is_under_colonization = no
		is_colony = yes
		owner = {
			is_country_type = default
		}
		pop_amount > 500
		num_unemployed > 500 #early out before the expensive count_owned_pop to come
		NOR = {
			has_planet_flag = criminal_underworld_disappeared 	# Cooldown
			has_planet_flag = criminal_underworld_event_up
			has_planet_flag = EaC_labor_movements_disappeared 	# Cooldown		# Modded
			has_planet_flag = EaC_labor_movements_event_up						# Modded
			has_planet_flag = EaC_underground_railroad_disappeared # Cooldown	# Modded
			has_planet_flag = EaC_underground_railroad_event_up					# Modded
			has_modifier = EaC_slave_revolts									# Modded
			has_modifier = EaC_underground_railroad_expanded 					# Modded
			has_modifier = EaC_worker_commune									# Modded
			has_modifier = EaC_labor_movements									# Modded
			has_planet_flag = shattered_frontier_planet
			has_modifier = unemployment_benefits
			has_modifier = activity_program
			has_modifier = standby_mode
			has_criminal_underworld_modifier = yes
			has_drone_deviancy_modifier = yes
			has_modifier = drone_corruption
			has_gang_wars_modifier = yes
			has_center_of_drug_trade_modifier = yes
			has_mob_rule_modifier = yes
		}
		OR = {
			AND = {
				owner = { is_gestalt = no }
				count_owned_pop_amount = {
					limit = {
						is_unemployed = yes
						is_shackled_robot = no
						is_enslaved = no
						NOR = {
							has_living_standard = { type = living_standard_utopian }
							has_living_standard = { type = living_standard_good }
							has_living_standard = { type = living_standard_shared_burden }
							has_living_standard = { type = living_standard_worker_ownership }
						}
					}
					count > 500
				}
			}
			AND = {
				owner = { is_gestalt = yes }
				count_owned_pop_amount = {
					limit = {
						is_unemployed = yes
						NOT = { has_living_standard = { type = living_standard_organic_trophy } }
					}
					count > 1000
				}
			}
		}
	}

	immediate = {
		set_planet_flag = criminal_underworld_event_up
		set_planet_flag = EaC_labor_movements_event_up
		set_planet_flag = EaC_underground_railroad_event_up
	}

	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2.0
			num_unemployed > 750
		}
		modifier = {
			factor = 2.0
			num_unemployed > 1000
		}
		modifier = {
			factor = 2.0
			num_unemployed > 1500
		}
		modifier = {
			factor = 2.0
			num_unemployed > 2000
		}
	}

	option = {
		name = {
			trigger = {
				if = {
					limit = { owner = { is_twisted_experimenters_empire = yes } }
					text = crime.1.a.experimenters
				}
				else = {
					text = EaC_civic_mechanic_events.1.a
				}
			}
		}
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		add_modifier = { modifier = "unemployment_benefits" years = 10 }
	}
	option = {
		name = {
			trigger = {
				if = {
					limit = { owner = { is_twisted_experimenters_empire = yes } }
					text = crime.1.a2.experimenters
				}
				else = {
					text = crime.1.a2
				}
			}
		}
		trigger = {
			owner = { is_hive_empire = yes }
		}
		add_modifier = { modifier = "activity_program" years = 10 }
	}
	option = {
		trigger = {
			owner = { is_machine_empire = yes }
		}
		name = crime.1.a3
		custom_tooltip = crime.1.a3.tooltip
		hidden_effect = { add_modifier = { modifier = "standby_mode" years = 10 } }
	}

	#Bottom Option

	option = {
		trigger = {
			owner = { is_twisted_experimenters_empire = yes }
		}
		name = {
			trigger = {
				if = {
					limit = { owner = { is_gestalt = no } }
					text = crime.1.b.experimenters
				}
				else_if = {
					limit = { owner = { is_hive_empire = yes } }
					text = crime.1.b2.experimenters
				}
			}
		}
		if = {
			limit = { owner = { is_gestalt = no } }
			add_modifier = { modifier = "criminal_underworld_experimenters" days = -1 }
		}
		else_if = {
			limit = { owner = { is_hive_empire = yes } }
			add_modifier = { modifier = "drone_deviancy_experimenters" days = -1 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.1.b
		trigger = {
			owner = {
				is_gestalt = no
				is_twisted_experimenters_empire = no
			}
		}
		add_modifier = { modifier = criminal_underworld days = -1 }
		add_modifier = { modifier = EaC_labor_movements days = -1 }
	}
	option = {
		name = crime.1.b2
		trigger = {
			owner = { 
				is_hive_empire = yes 
				is_twisted_experimenters_empire = no
			}
		}
		add_modifier = { modifier = drone_deviancy days = -1 }
	}
	option = {
		name = crime.1.b3
		trigger = {
			owner = { is_machine_empire = yes }
		}
		add_modifier = { modifier = drone_corruption days = -1 }
	}

	after = {
		hidden_effect = {
			remove_planet_flag = criminal_underworld_event_up
			remove_planet_flag = EaC_labor_movements_event_up
			remove_planet_flag = EaC_underground_railroad_event_up
		}
	}
}

# GENERIC

# Bribed Officials - # Reflavored to fit with general strike mechanic
planet_event = {
	id = crime.2
	title = EaC_civic_mechanic_events.2.name
	desc = {
		trigger = {
			has_modifier = EaC_labor_movements
			owner = {  is_authoritarian = yes }
		}
		text = EaC_civic_mechanic_events.2.desc.has_authoritarian_ethic
	}
	desc = {
		trigger = {
			has_modifier = EaC_labor_movements
			owner = { is_authoritarian = no }
		}
		text = EaC_civic_mechanic_events.2.desc.not_authoritarian_ethic
	}
	desc = {
		trigger = { owner = { NOT = { has_modifier = EaC_labor_movements } } }
		text = crime.2.desc
	}
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_criminal_underworld_modifier = yes
	}

	immediate = {
		add_modifier = { modifier = bribed_officials years = 10 }
		set_timed_planet_flag = {
			flag = planet_crime_flag
			years = 10
		}
		if = {
			limit = { has_modifier = EaC_labor_movements  }
			set_timed_planet_flag = {
				flag = EaC_planet_general_strike_flag
				years = 10
			}
		}
	}

	option = {
		#name = EaC_civic_mechanic_events.2.a
		name = {
			trigger = {
				if = {
					limit = { owner = { is_twisted_experimenters_empire = yes } }
					text = crime.2.a.experimenters
				}
				else = {
					text = EaC_civic_mechanic_events.2.a
				}
			}
		}
		trigger = { owner = { is_authoritarian = no } }
		tooltip = {
			add_modifier = { modifier = bribed_officials years = 10 }
		}
		if = {
			limit = { has_modifier = EaC_labor_movements  }
			custom_tooltip = EaC_planet_general_strike_flag_tooltip
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2.b
		trigger = { owner = {  is_authoritarian = yes } }
		tooltip = {
			add_modifier = { modifier = bribed_officials years = 10 }
		}
		if = {
			limit = { has_modifier = EaC_labor_movements  }
			custom_tooltip = EaC_planet_general_strike_flag_tooltip
		}
	}

	option = {
		name = EaC_civic_mechanic_events.2.c
		trigger = {
			has_modifier = EaC_labor_movements
			owner = { is_authoritarian = no }
		}
		tooltip = {
			add_modifier = { modifier = bribed_officials years = 10 }
		}
		hidden_effect = {
			remove_planet_flag = EaC_planet_general_strike_flag
		}
		owner = {
			create_leader = {
				name = random
				species = owner_species
				class = official
				skill = 1
				set_age = 30
				traits = { trait = leader_trait_labor_advocate }
			}
			last_created_leader = { root = { assign_leader = prev } }
		}
	}
}

# Drug Trade # Reflavoring an existing crime event about drug abuse - adding modded flavor
planet_event = {
	id = crime.3
	title = crime.3.name
	desc = {
		trigger = {
			owner = {
				NOT = { has_policy_flag = private_healthcare }
			}
		}
		text = EaC_civic_mechanic_events.3.desc.has_public_healthcare
	}
	desc = {
		trigger = {
			owner = {
				has_policy_flag = private_healthcare
			}
		}
		text = EaC_civic_mechanic_events.3.desc.has_private_healthcare
	}
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = criminal_underworld
	}

	immediate = {
		add_modifier = { modifier = substance_abuse years = 10 }
		set_timed_planet_flag = {
			flag = planet_crime_flag
			years = 10
		}
		if = {
			limit = {
				has_modifier = EaC_labor_movements
				owner = { has_policy_flag = private_healthcare }
			}
			set_timed_planet_flag = {
				flag = EaC_planet_general_strike_flag
				years = 10
			}
		}
	}

	option = {
		name = EaC_civic_mechanic_events.3.a
		trigger = { owner = { is_gestalt = yes } }
		tooltip = {
			add_modifier = { modifier = substance_abuse years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.3.a.has_public_healthcare
		trigger = {
			owner = {
				NOR = { is_gestalt = yes has_policy_flag = private_healthcare }
			}
		}
		tooltip = {
			add_modifier = { modifier = substance_abuse years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.3.b.has_private_healthcare
		trigger = {
			has_modifier = EaC_labor_movements
			owner = {
				is_gestalt = no
				has_policy_flag = private_healthcare
			}
		}
		tooltip = {
			add_modifier = { modifier = substance_abuse years = 10 }
		}
		if = {
			limit = {
				has_modifier = EaC_labor_movements
				owner = { has_policy_flag = private_healthcare }
			}
			custom_tooltip = EaC_planet_general_strike_flag_tooltip
		}
	}

	option = {
		name = EaC_civic_mechanic_events.3.b.has_private_healthcare
		trigger = {
			NOT = { has_modifier = EaC_labor_movements }
			owner = {
				is_gestalt = no
				has_policy_flag = private_healthcare
			}
		}
		tooltip = {
			add_modifier = { modifier = substance_abuse years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.3.c.not_public_healthcare
		trigger = {
			owner = {
				is_gestalt = no
				can_set_policy = { policy = healthcare option = public_healthcare }
				NOT = { has_policy_flag = public_healthcare }
			}
		}
		tooltip = {
			add_modifier = { modifier = substance_abuse years = 10 }
		}
		if = {
			limit = {
				has_modifier = EaC_labor_movements
				owner = { has_policy_flag = private_healthcare }
			}
			hidden_effect = { remove_planet_flag = EaC_planet_general_strike_flag }
		}
		owner = { set_policy = { policy = healthcare option = public_healthcare cooldown = yes } }
	}
}

# Enforcers Clash with Strikers
planet_event = {
	id = EaC_civic_mechanic_events.3004
	title = EaC_civic_mechanic_events.4.name
	desc = {
		trigger = { NOT = { has_modifier = anticrime_campaign } }
		text = EaC_civic_mechanic_events.4.desc.not_anticrime_campaign
	}
	desc = {
		trigger = { has_modifier = anticrime_campaign }
		text = EaC_civic_mechanic_events.4.desc.has_anticrime_campaign
	}
	picture = GFX_evt_derelict_interior
	show_sound = event_ground_battle
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_labor_movements # Changed copy of --> criminal_underworld
	}

	immediate = {
		add_planet_devastation = 15
		set_timed_planet_flag = {
			flag = EaC_planet_general_strike_flag # Changed copy of --> planet_crime_flag
			days = 3600
		}
	}

	option = {
		name = EaC_civic_mechanic_events.4.not_anticrime_campaign.a
		trigger = { NOT = { has_modifier = anticrime_campaign } }
		tooltip = {
			add_planet_devastation = 15
		}
		add_modifier = { modifier = "anticrime_campaign" days = -1 }
		custom_tooltip = EaC_planet_general_strike_flag_tooltip
	}

	option = {
		name = EaC_civic_mechanic_events.4.not_anticrime_campaign.b
		trigger = { NOT = { has_modifier = anticrime_campaign } }
		tooltip = {
			add_planet_devastation = 15
		}
		hidden_effect = { remove_planet_flag = EaC_planet_general_strike_flag }
	}

	option = {
		name = EaC_civic_mechanic_events.4.has_anticrime_campaign.c
		trigger = { has_modifier = anticrime_campaign }
		tooltip = {
			add_planet_devastation = 20
		}
		custom_tooltip = EaC_planet_general_strike_flag_tooltip
	}

	option = {
		name = EaC_civic_mechanic_events.4.has_anticrime_campaign.d
		trigger = { has_modifier = anticrime_campaign }
		tooltip = {
			add_planet_devastation = 20
		}
		remove_modifier = anticrime_campaign
		hidden_effect = { remove_planet_flag = EaC_planet_general_strike_flag }
	}
}

# Smugglers --> Underground Railroad Reported
planet_event = {
	id = EaC_civic_mechanic_events.3005
	title = EaC_civic_mechanic_events.5.name
	desc = EaC_civic_mechanic_events.5.desc
	picture = GFX_evt_ship_offloading_cargo
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_activity
	}

	immediate = {
		add_modifier = { modifier = EaC_underground_railroad_smuggling years = 10 }
		set_timed_planet_flag = {
			flag = EaC_planet_underground_railroad_flag # Was changed to seperate EaC_planet_general_strike_flag type events
			days = 3600
		}
	}

	option = {
		name = EaC_civic_mechanic_events.5.a
		tooltip = {
			add_modifier = { modifier = EaC_underground_railroad_smuggling years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.5.b
		tooltip = {
			add_modifier = { modifier = EaC_underground_railroad_smuggling years = 10 }
		}
	}
}

# Crime Wave --> Slave Runaway
planet_event = {
	id = EaC_civic_mechanic_events.3006
	title = EaC_civic_mechanic_events.6.name
	desc = EaC_civic_mechanic_events.6.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_activity
	}

	immediate = {
		add_modifier = { modifier = EaC_inspired_slave_resistance years = 10 }	# crime_wave --> EaC_inspired_slave_resistance
		set_timed_planet_flag = {
			flag = EaC_planet_underground_railroad_flag
			years = 10
		}
	}

	option = {
		name = EaC_civic_mechanic_events.6.a
		tooltip = {
			add_modifier = { modifier = EaC_inspired_slave_resistance years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.6.b
		tooltip = {
			add_modifier = { modifier = EaC_inspired_slave_resistance years = 10 }
		}
	}
}

# Contraband Seized
planet_event = {
	id = EaC_civic_mechanic_events.3007
	title = EaC_civic_mechanic_events.7.name
	desc = EaC_civic_mechanic_events.7.desc
	picture = GFX_evt_ship_offloading_cargo
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_activity
	}

	immediate = {
		set_timed_planet_flag = {
			flag = EaC_planet_underground_railroad_flag
			years = 10
		}
	}

	option = {
		name = EaC_civic_mechanic_events.7.a

	}

	option = {
		name = EaC_civic_mechanic_events.7.b

	}
}

# Crime Boss Arrested
planet_event = {
	id = EaC_civic_mechanic_events.3008
	title = EaC_civic_mechanic_events.8.name
	desc = EaC_civic_mechanic_events.8.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_activity
	}

	immediate = {
		set_timed_planet_flag = {
			flag = EaC_planet_underground_railroad_flag
			years = 10
		}
		add_modifier = { modifier = EaC_underground_railroad_conductor_arrested years = 10 }
	}

	option = {
		name = EaC_civic_mechanic_events.8.a
		tooltip = {
			add_modifier = { modifier = EaC_underground_railroad_conductor_arrested years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.8.b
		tooltip = {
			add_modifier = { modifier = EaC_underground_railroad_conductor_arrested years = 10 }
		}
	}
}

# Criminal Underworld Appears (High Crime)	- # Underground Labor Movements
planet_event = {
	id = EaC_civic_mechanic_events.30401
	title = EaC_civic_mechanic_events.40.name
	desc = {
		trigger = {
			count_enslaved_species = { count = 1 }
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.40.desc
	}
	desc = {
		trigger = {
			count_enslaved_species = { count = 0 }
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.40.desc
	}
	# desc = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.40.b.desc
	#}
	# desc = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.40.c.desc
	#}
	picture = {
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		picture = GFX_evt_dark_alley
	}
	# picture = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	picture = GFX_evt_hive_mind
	#}
	# picture = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	picture = GFX_evt_glitchy_matrix
	#}
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		owner = {
			is_gestalt = no
		}
		count_owned_pop_amount = {
			count > 0
			limit = {
				OR = {
					has_living_standard = { country = owner type = living_standard_dystopian_society }
					has_living_standard = { country = owner type = living_standard_stratified }
					has_living_standard = { country = owner type = living_standard_subsistence }
				}
				OR = {
					has_ethic = ethic_socialism
					has_ethic = ethic_fanatic_socialism
					is_egalitarian = yes
				}
				is_enslaved = no
			}
		}
		can_generate_trade_value = yes
		planet_crime >= 30
		NOR = {
			has_planet_flag = EaC_labor_movements_event_up
			has_modifier = unemployment_benefits
			# has_modifier = activity_program
			# has_modifier = standby_mode
			has_modifier = EaC_labor_movements
			# has_modifier = drone_deviancy
			# has_modifier = drone_corruption
			has_modifier = EaC_worker_commune
		}
		NOT = { has_planet_flag = EaC_labor_movements_disappeared } # Cooldown
	}

	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2.0
			planet_crime >= 50
		}
		modifier = {
			factor = 2.0
			planet_crime >= 70
		}
		modifier = {
			factor = 2.0
			planet_crime >= 90
		}
	}

	immediate = {
		set_planet_flag = EaC_labor_movements_event_up
		set_timed_planet_flag = { flag = EaC_labor_movements_appeared years = 10 }
		add_modifier = { modifier = "EaC_labor_movements" days = -1 }
		break = yes
		# if = {
		#	limit = {
		#		owner = { is_hive_empire = yes }
		#	}
		#	add_modifier = { modifier = "drone_deviancy" days = -1 }
		#	break = yes
		#}
		# if = {
		#	limit = {
		#		owner = { is_machine_empire = yes }
		#	}
		#	add_modifier = { modifier = "drone_corruption" days = -1 }
		#}
	}

	option = {
		name = EaC_civic_mechanic_events.40.a
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		tooltip = {
			add_modifier = { modifier = "EaC_labor_movements" days = -1 }
		}
	}
	# option = {
	#	name = EaC_civic_mechanic_events.40.b
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	tooltip = {
	#		add_modifier = { modifier = "drone_deviancy" days = -1 }
	#	}
	#}
	# option = {
	#	name = EaC_civic_mechanic_events.40.c
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	tooltip = {
	#		add_modifier = { modifier = "drone_corruption" days = -1 }
	#	}
	#}

	after = {
		hidden_effect = {
			remove_planet_flag = EaC_labor_movements_event_up
		}
	}
}

# Criminal Underworld Appears (High Crime)	- # Underground Railroad
planet_event = {
	id = EaC_civic_mechanic_events.30402
	title = EaC_civic_mechanic_events.40.name
	desc = {
		trigger = {
			count_enslaved_species = { count = 1 }
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.40.desc
	}
	desc = {
		trigger = {
			count_enslaved_species = { count = 0 }
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.40.desc
	}
	# desc = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.40.b.desc
	#}
	# desc = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.40.c.desc
	#}
	picture = {
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		picture = GFX_evt_dark_alley
	}
	# picture = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	picture = GFX_evt_hive_mind
	#}
	# picture = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	picture = GFX_evt_glitchy_matrix
	#}
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		owner = {
			is_gestalt = no
		}
		any_owned_pop_group = { is_enslaved = yes }
		count_owned_pop_amount = {
			count > 0
			limit = {
				OR = {
					is_egalitarian = yes
				}
				is_enslaved = no
			}
		}
		can_generate_trade_value = yes
		planet_crime >= 30
		NOR = {
			has_planet_flag = EaC_underground_railroad_event_up
			has_modifier = EaC_underground_railroad_activity
			# has_modifier = drone_deviancy
			# has_modifier = drone_corruption
			has_modifier = EaC_slave_revolts
			has_modifier = EaC_underground_railroad_expanded
		}
		NOT = { has_planet_flag = EaC_underground_railroad_disappeared } # Cooldown
	}

	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2.0
			planet_crime >= 50
		}
		modifier = {
			factor = 2.0
			planet_crime >= 70
		}
		modifier = {
			factor = 2.0
			planet_crime >= 90
		}
	}

	immediate = {
		set_planet_flag = EaC_underground_railroad_event_up
		set_timed_planet_flag = { flag = EaC_underground_railroad_appeared years = 10 }
		add_modifier = { modifier = "EaC_underground_railroad_activity" days = -1 }
		break = yes
		# if = {
		#	limit = {
		#		owner = { is_hive_empire = yes }
		#	}
		#	add_modifier = { modifier = "drone_deviancy" days = -1 }
		#	break = yes
		#}
		# if = {
		#	limit = {
		#		owner = { is_machine_empire = yes }
		#	}
		#	add_modifier = { modifier = "drone_corruption" days = -1 }
		#}
	}

	option = {
		name = EaC_civic_mechanic_events.40.a
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		tooltip = {
			add_modifier = { modifier = "EaC_underground_railroad_activity" days = -1 }
		}
	}
	# option = {
	#	name = EaC_civic_mechanic_events.40.b
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	tooltip = {
	#		add_modifier = { modifier = "drone_deviancy" days = -1 }
	#	}
	#}
	# option = {
	#	name = EaC_civic_mechanic_events.40.c
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	tooltip = {
	#		add_modifier = { modifier = "drone_corruption" days = -1 }
	#	}
	#}

	after = {
		hidden_effect = {
			remove_planet_flag = EaC_underground_railroad_event_up
		}
	}
}
###################################################################################
# Criminal Underworld Disappears (Low Crime) OR (Low Ideology)	- Labor Movements #
###################################################################################
planet_event = {
	id = EaC_civic_mechanic_events.30411
	title = EaC_civic_mechanic_events.41.name
	# (Low Crime)#
	desc = {
		trigger = {
			count_enslaved_species = { count = 1 }
			count_owned_pop_amount = {
				count > 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.has_ethic_libertarian.has_ethic_cooperative.has_slaves
	}
	desc = {
		trigger = {
			count_enslaved_species = { count = 0 }
			count_owned_pop_amount = {
				count > 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.has_ethic_libertarian.has_ethic_cooperative.no_slaves
	}
	# (Low Ideology)#
	desc = {
		trigger = {
			count_enslaved_species = { count = 1 }
			count_owned_pop_amount = {
				count = 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.has_ethic_libertarian.has_ethic_cooperative.has_slaves
	}
	desc = {
		trigger = {
			count_enslaved_species = { count = 0 }
			count_owned_pop_amount = {
				count = 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.no_ethic_libertarian.no_ethic_cooperative.no_slaves
	}
	# desc = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.41.b.desc
	#}
	# desc = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.41.c.desc
	#}
	picture = {
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		picture = GFX_evt_dark_alley
	}
	# picture = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	picture = GFX_evt_hive_mind
	#}
	# picture = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	picture = GFX_evt_circuitry_modification
	#}
	show_sound = event_cityscape
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		owner = {
			is_country_type = default
			is_gestalt = no
		}
		OR = {
			has_modifier = EaC_labor_movements
			# has_modifier = EaC_underground_railroad_activity
			# has_modifier = drone_deviancy
			# has_modifier = drone_corruption
			# has_modifier = EaC_slave_revolts
			# has_modifier = EaC_underground_railroad_expanded
			has_modifier = EaC_worker_commune
		}
		OR = {
			NOT = { has_planet_flag = EaC_labor_movements_appeared } 	# Cooldown that lasts 3600 days.
			count_owned_pop_amount = { # This should be checking that the nobody has labor ideology while living in poor conditions. Excludes slaves from count.
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
				count = 0
			}
		}
		pop_amount > 0
		OR = {
			planet_crime <= 10
			count_owned_pop_amount = { # This should be checking that the nobody has labor ideology while living in poor conditions. Excludes slaves from count.
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
				count = 0
			}
		}
	}

	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2.0
			count_owned_pop_amount = {
				limit = {
					OR = {
						has_job_type = enforcer		# has_job_type -  # Not Supported in Stellaris 4.0
						has_job_type = coordinator	# has_job_type -  # Not Supported in Stellaris 4.0
					}
				}
				count > 2
			}
		}
		modifier = {
			factor = 2.0
			count_owned_pop_amount = {
				limit = {
					OR = {
						has_job_type = enforcer		# has_job_type -  # Not Supported in Stellaris 4.0
						has_job_type = coordinator	# has_job_type -  # Not Supported in Stellaris 4.0
					}
				}
				count > 3
			}
		}
		modifier = {
			factor = 2.0
			count_owned_pop_amount = {
				limit = {
					OR = {
						has_job_type = enforcer		# has_job_type -  # Not Supported in Stellaris 4.0
						has_job_type = coordinator	# has_job_type -  # Not Supported in Stellaris 4.0
					}
				}
				count > 4
			}
		}
	}

	option = {
		name = GOOD
		if = {
			limit = { has_modifier = EaC_labor_movements }
			remove_modifier = EaC_labor_movements
		}
		# if = {
		#	limit = { has_modifier = EaC_underground_railroad_activity }
		#	remove_modifier = EaC_underground_railroad_activity
		#}
		# if = {
		#	limit = { has_modifier = EaC_slave_revolts }
		#	remove_modifier = EaC_slave_revolts
		#}
		# if = {
		#	limit = { has_modifier = EaC_underground_railroad_expanded }
		#	remove_modifier = EaC_underground_railroad_expanded
		#}
		if = {
			limit = { has_modifier = EaC_worker_commune }
			remove_modifier = EaC_worker_commune
		}
		# if = {
		#	limit = { has_modifier = bribed_officials }
		#	remove_modifier = bribed_officials
		#}
		# if = {
		#	limit = { has_modifier = substance_abuse }
		#	remove_modifier = substance_abuse
		#}
		# if = {
		#	limit = { has_modifier = EaC_underground_railroad_smuggling }
		#	remove_modifier = EaC_underground_railroad_smuggling
		#}
		# if = {
		#	limit = { has_modifier = EaC_inspired_slave_resistance }
		#	remove_modifier = EaC_inspired_slave_resistance
		#}
		# if = {
		#	limit = { has_modifier = EaC_slave_resistance }
		#	remove_modifier = EaC_slave_resistance
		#}
		if = {
			limit = { has_modifier = EaC_labor_propaganda }
			remove_modifier = EaC_labor_propaganda
		}
		if = {
			limit = { has_modifier = EaC_administration_strikes }
			remove_modifier = EaC_administration_strikes
		}
		if = {
			limit = { has_modifier = EaC_worker_commune_means_of_production }
			remove_modifier = EaC_worker_commune_means_of_production
		}
		# Hive Minds
		# if = {
		#	limit = { has_modifier = drone_deviancy }
		#	remove_modifier = drone_deviancy
		#}
		# if = {
		#	limit = { has_modifier = deviant_interference }
		#	remove_modifier = deviant_interference
		#}
		# Machine Intelligences
		# if = {
		#	limit = { has_modifier = drone_corruption }
		#	remove_modifier = drone_corruption
		#}
		# if = {
		#	limit = { has_modifier = drone_signal_interference }
		#	remove_modifier = drone_signal_interference
		#}
		hidden_effect = {
			set_timed_planet_flag = { flag = EaC_labor_movements_disappeared years = 10 }
			if = {
				limit = { has_planet_flag = EaC_labor_movements_appeared } 	# Cooldown that lasts 3600 days should be removed
				remove_planet_flag = EaC_labor_movements_appeared			# This can only happen if ideology/living standards changed, which
			}
		}
	}
}
##########################################################################################
# Criminal Underworld Disappears (Low Crime) OR (Low Ideology) - 	Underground Railroad #
##########################################################################################
planet_event = {
	id = EaC_civic_mechanic_events.30412
	title = EaC_civic_mechanic_events.41.name
	# (Low Crime)#
	desc = {
		trigger = {
			count_enslaved_species = { count = 1 }
			count_owned_pop_amount = {
				count > 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.has_ideology.has_slaves
	}
	desc = {
		trigger = {
			count_enslaved_species = { count = 0 }
			count_owned_pop_amount = {
				count > 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.has_ideology.no_slaves
	}
	# (Low Ideology)#
	desc = {
		trigger = {
			count_enslaved_species = { count = 1 }
			count_owned_pop_amount = {
				count = 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.no_ideology.has_slaves
	}
	desc = {
		trigger = {
			count_enslaved_species = { count = 0 }
			count_owned_pop_amount = {
				count = 0
				limit = {
					OR = {
						has_living_standard = { country = owner type = living_standard_dystopian_society }
						has_living_standard = { country = owner type = living_standard_stratified }
						has_living_standard = { country = owner type = living_standard_subsistence }
					}
					OR = {
						has_ethic = ethic_socialism
						has_ethic = ethic_fanatic_socialism
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
			owner = {
				is_gestalt = no
			}
		}
		text = EaC_civic_mechanic_events.41.desc.no_ideology.no_slaves
	}
	# desc = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.41.b.desc
	#}
	# desc = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	text = EaC_civic_mechanic_events.41.c.desc
	#}
	picture = {
		trigger = {
			owner = {
				is_gestalt = no
			}
		}
		picture = GFX_evt_dark_alley
	}
	# picture = {
	#	trigger = {
	#		owner = { is_hive_empire = yes }
	#	}
	#	picture = GFX_evt_hive_mind
	#}
	# picture = {
	#	trigger = {
	#		owner = { is_machine_empire = yes }
	#	}
	#	picture = GFX_evt_circuitry_modification
	#}
	show_sound = event_cityscape
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		owner = {
			is_country_type = default
			is_gestalt = no
		}
		OR = {
			has_modifier = EaC_underground_railroad_activity
			# has_modifier = drone_deviancy
			# has_modifier = drone_corruption
			has_modifier = EaC_slave_revolts
			has_modifier = EaC_underground_railroad_expanded
		}
		OR = {
			NOT = { has_planet_flag = EaC_underground_railroad_appeared } # Cooldown
			count_owned_pop_amount = {
				count = 0
				limit = {
					OR = {
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
		}
		pop_amount > 0
		OR = {
			planet_crime <= 10
			count_owned_pop_amount = {
				count = 0
				limit = {
					OR = {
						is_egalitarian = yes
					}
					is_enslaved = no
				}
			}
		}
	}

	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2.0
			count_owned_pop_amount = {
				limit = {
					OR = {
						has_job_type = enforcer		# has_job_type -  # Not Supported in Stellaris 4.0
						has_job_type = coordinator	# has_job_type -  # Not Supported in Stellaris 4.0
					}
				}
				count > 2
			}
		}
		modifier = {
			factor = 2.0
			count_owned_pop_amount = {
				limit = {
					OR = {
						has_job_type = enforcer		# has_job_type -  # Not Supported in Stellaris 4.0
						has_job_type = coordinator	# has_job_type -  # Not Supported in Stellaris 4.0
					}
				}
				count > 3
			}
		}
		modifier = {
			factor = 2.0
			count_owned_pop_amount = {
				limit = {
					OR = {
						has_job_type = enforcer		# has_job_type -  # Not Supported in Stellaris 4.0
						has_job_type = coordinator	# has_job_type -  # Not Supported in Stellaris 4.0
					}
				}
				count > 4
			}
		}
	}

	option = {
		name = GOOD
		# if = {
		#	limit = { has_modifier = EaC_labor_movements }
		#	remove_modifier = EaC_labor_movements
		#}
		if = {
			limit = { has_modifier = EaC_underground_railroad_activity }
			remove_modifier = EaC_underground_railroad_activity
		}
		if = {
			limit = { has_modifier = EaC_slave_revolts }
			remove_modifier = EaC_slave_revolts
		}
		if = {
			limit = { has_modifier = EaC_underground_railroad_expanded }
			remove_modifier = EaC_underground_railroad_expanded
		}
		# if = {
		#	limit = { has_modifier = EaC_worker_commune }
		#	remove_modifier = EaC_worker_commune
		#}
		# if = {
		#	limit = { has_modifier = bribed_officials }
		#	remove_modifier = bribed_officials
		#}
		# if = {
		#	limit = { has_modifier = substance_abuse }
		#	remove_modifier = substance_abuse
		#}
		if = {
			limit = { has_modifier = EaC_underground_railroad_smuggling }
			remove_modifier = EaC_underground_railroad_smuggling
		}
		if = {
			limit = { has_modifier = EaC_inspired_slave_resistance }
			remove_modifier = EaC_inspired_slave_resistance
		}
		if = {
			limit = { has_modifier = EaC_slave_resistance }
			remove_modifier = EaC_slave_resistance
		}
		# if = {
		#	limit = { has_modifier = EaC_labor_propaganda }
		#	remove_modifier = EaC_labor_propaganda
		#}
		# if = {
		#	limit = { has_modifier = EaC_administration_strikes }
		#	remove_modifier = EaC_administration_strikes
		#}
		# if = {
		#	limit = { has_modifier = EaC_worker_commune_means_of_production }
		#	remove_modifier = EaC_worker_commune_means_of_production
		#}
		# Hive Minds
		# if = {
		#	limit = { has_modifier = drone_deviancy }
		#	remove_modifier = drone_deviancy
		#}
		# if = {
		#	limit = { has_modifier = deviant_interference }
		#	remove_modifier = deviant_interference
		#}
		# Machine Intelligences
		# if = {
		#	limit = { has_modifier = drone_corruption }
		#	remove_modifier = drone_corruption
		#}
		# if = {
		#	limit = { has_modifier = drone_signal_interference }
		#	remove_modifier = drone_signal_interference
		#}
		hidden_effect = {
			set_timed_planet_flag = { flag = EaC_underground_railroad_disappeared years = 10 }
			if = {
				limit = { has_planet_flag = EaC_underground_railroad_appeared } 	# Cooldown that lasts 3600 days should be removed
				remove_planet_flag = EaC_underground_railroad_appeared				# This can only happen if ideology/living standards changed, which
			}
		}
	}
}

# Crime Gatekeeper
event = {
	id = EaC_civic_mechanic_events.3050
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		every_playable_country = {
			limit = {
				is_gestalt = no
				any_owned_planet = {
					OR = {
						has_modifier = EaC_labor_movements
						has_modifier = EaC_underground_railroad_activity
						has_modifier = EaC_slave_revolts
						has_modifier = EaC_underground_railroad_expanded
						has_modifier = EaC_worker_commune
					}
					NOR = {
						has_planet_flag = EaC_planet_general_strike_flag
						has_modifier = crime_lord_deal
					}
				}
			}
			country_event = { id = EaC_civic_mechanic_events.3051 }
		}
	}
}

# Crime Gatekeeper (Normies)
country_event = {
	id = EaC_civic_mechanic_events.3051
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_owned_planet = {
			limit = {
				OR = {
					has_modifier = EaC_labor_movements
					has_modifier = EaC_underground_railroad_activity
					has_modifier = EaC_slave_revolts
					has_modifier = EaC_underground_railroad_expanded
					has_modifier = EaC_worker_commune
				}
				NOR = {
					has_planet_flag = EaC_planet_general_strike_flag
					# has_modifier = crime_lord_deal						# Perhaps this can be represented by a deal with unions? Possibly given by the 'Trade Union' civic?
				}
			}
			random_list = {
				300 = {}
				# 10 = {
				#	modifier = {
				#		factor = 0
				#		NOT = { has_modifier = EaC_labor_movements }
				#	}
				#	planet_event = { id = crime.2 days = 1 random = 300 }	# Vanilla event was not cloned, only reflavored
				#}
				# 10 = {
				#	modifier = {
				#		factor = 0
				#		NOT = { has_modifier = EaC_labor_movements }
				#	}
				#	planet_event = { id = crime.3 days = 1 random = 300 }	# Vanilla event was not cloned, only reflavored
				#}
				# 10 = {
				#	modifier = {
				#		factor = 0
				#		NOT = { has_modifier = EaC_labor_movements }
				#	}
				#	planet_event = { id = crime.4 days = 1 random = 300 }
				#}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_activity }
					}
					planet_event = { id = EaC_civic_mechanic_events.3005 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_activity }
					}
					planet_event = { id = EaC_civic_mechanic_events.3006 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_activity }
					}
					planet_event = { id = EaC_civic_mechanic_events.3007 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_activity }
					}
					planet_event = { id = EaC_civic_mechanic_events.3008 days = 1 random = 300 }
				}
				10 = { # Gang Wars
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_activity }
						planet_crime < 50
					}
					planet_event = { id = EaC_civic_mechanic_events.3100 days = 1 random = 300 }
				}
				10 = { # Center of Drug Trade
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_activity }
						planet_crime < 50
					}
					planet_event = { id = EaC_civic_mechanic_events.3200 days = 1 random = 300 }
				}
				10 = { # Mob Rule
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_labor_movements }
						planet_crime < 50
					}
					planet_event = { id = EaC_civic_mechanic_events.3300 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_slave_revolts }
					}
					planet_event = { id = EaC_civic_mechanic_events.3101 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_slave_revolts }
					}
					planet_event = { id = EaC_civic_mechanic_events.3102 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_slave_revolts }
					}
					planet_event = { id = EaC_civic_mechanic_events.3103 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_slave_revolts }
					}
					planet_event = { id = EaC_civic_mechanic_events.3104 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_expanded }
					}
					planet_event = { id = EaC_civic_mechanic_events.3201 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_expanded }
					}
					planet_event = { id = EaC_civic_mechanic_events.3202 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_expanded }
					}
					planet_event = { id = EaC_civic_mechanic_events.3203 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_underground_railroad_expanded }
					}
					planet_event = { id = EaC_civic_mechanic_events.3204 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_worker_commune }
					}
					planet_event = { id = EaC_civic_mechanic_events.3301 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_worker_commune }
					}
					planet_event = { id = EaC_civic_mechanic_events.3302 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						OR = {
							NOT = { has_modifier = EaC_worker_commune }
							NOT = { exists = leader }
							owner = { has_country_flag = EaC_worker_commune_killed_governor }
						}
					}
					modifier = {
						factor = 0
						exists = leader
						leader = {
							OR = {
								has_chosen_one_leader_trait = yes
								has_leader_flag = legendary_leader
							}
						}
					}
					planet_event = { id = EaC_civic_mechanic_events.3303 days = 1 random = 300 }
				}
				10 = {
					modifier = {
						factor = 0
						NOT = { has_modifier = EaC_worker_commune }
					}
					planet_event = { id = EaC_civic_mechanic_events.3304 days = 1 random = 300 }
				}
			}
		}
	}
}

# Underground Railroad Events - Slave Revolt in System

# Gang Wars --> Slave Revolt
planet_event = {
	id = EaC_civic_mechanic_events.3100
	title = EaC_civic_mechanic_events.100.name
	desc = EaC_civic_mechanic_events.100.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_activity
		NOT = { has_modifier = EaC_slave_revolts }
	}

	immediate = {
		remove_modifier = EaC_underground_railroad_activity
		add_modifier = { modifier = "EaC_slave_revolts" days = -1 } # gang_wars changed to --> EaC_slave_revolts
	}

	option = {
		name = EaC_civic_mechanic_events.100.a
		tooltip = {
			remove_modifier = EaC_underground_railroad_activity
			add_modifier = { modifier = "EaC_slave_revolts" days = -1 }
		}
	}
}

# Gangs Ambush Enforcers
planet_event = {
	id = EaC_civic_mechanic_events.3101
	title = EaC_civic_mechanic_events.101.name
	desc = EaC_civic_mechanic_events.101.desc
	picture = GFX_evt_derelict_interior
	show_sound = event_ground_battle
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_slave_revolts
		any_owned_pop_group = { has_job_type = enforcer }	# has_job_type -  # Not Supported in Stellaris 4.0
	}

	immediate = {
		# random_owned_pop_group = {
			# limit = { has_job_type = enforcer }	# has_job_type -  # Not Supported in Stellaris 4.0
			kill_single_pop = yes
		#}
	}

	option = {
		name = EaC_civic_mechanic_events.200.a
		custom_tooltip = EaC_civic_mechanic_events.101.tooltip
	}
}

# Gang Warfare Spreads into Space
planet_event = {
	id = EaC_civic_mechanic_events.3102
	title = EaC_civic_mechanic_events.102.name
	desc = EaC_civic_mechanic_events.102.desc
	picture = GFX_evt_pirates_attacking_cargo
	show_sound = event_space_battle
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		owner = {
			# has_country_flag = birth_of_piracy						# Vanilla code tieing in piracy, however this event is unrelated to piracy
			NOT = { has_country_flag = EaC_slave_revolt_spawned }	# crime_pirates_spawned --> EaC_slave_revolt_spawned
		}
		has_modifier = EaC_slave_revolts
	}

	immediate = {
		owner = {
			set_timed_country_flag = { flag = EaC_slave_revolt_spawned years = 10 }
			owner_species = { save_event_target_as = owner_species }
		}
		solar_system = {
			save_event_target_as = EaC_slave_revolt_system
			EaC_create_normal_slave_revolt_country = yes
			EaC_create_slave_revolt_fleet = yes
		}
	}

	option = {
		name = EaC_civic_mechanic_events.200.a
		custom_tooltip = EaC_civic_mechanic_events.102.tooltip
	}
}

# Pitched Battle
planet_event = {
	id = EaC_civic_mechanic_events.3103
	title = EaC_civic_mechanic_events.103.name
	desc = EaC_civic_mechanic_events.103.desc
	picture = GFX_evt_derelict_interior
	show_sound = event_ground_battle
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_slave_revolts
	}

	immediate = {
		if = {
			limit = { any_playable_country = { has_policy_flag = refugees_allowed } } # If refugees_allowed country exists
			random_playable_country = {
				limit = { has_policy_flag = refugees_allowed }
				random_owned_planet = {
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
				}
				# An event then fires notifying the country who got the pops
			}
		}
		else = {
			random_owned_pop_group = { kill_single_pop = yes }
			random_owned_pop_group = { kill_single_pop = yes }
			random_owned_pop_group = { kill_single_pop = yes }
		}
		add_planet_devastation = 15
	}

	option = {
		name = DISCONCERTING
		custom_tooltip = EaC_civic_mechanic_events.103.tooltip
		tooltip = { add_planet_devastation = 15 }
	}
}

# Traders Steer Clear
planet_event = {
	id = EaC_civic_mechanic_events.3104
	title = EaC_civic_mechanic_events.104.name
	desc = EaC_civic_mechanic_events.104.desc
	picture = GFX_evt_cargoship_caravan
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_slave_revolts
	}

	immediate = {
		add_modifier = { modifier = "travel_advisory" years = 10 }
		set_timed_planet_flag = {
			flag = EaC_planet_general_strike_flag
			years = 10
		}
	}

	option = {
		name = WORRYING
		tooltip = {
			add_modifier = { modifier = "travel_advisory" years = 10 }
		}
	}
}

# Center of Drug Trade --> Underground Railroad Expands
planet_event = {
	id = EaC_civic_mechanic_events.3200
	title = EaC_civic_mechanic_events.200.name
	desc = EaC_civic_mechanic_events.200.desc
	picture = GFX_evt_smugglers_in_bar
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_activity
		NOT = { has_modifier = EaC_underground_railroad_expanded }
	}

	immediate = {
		remove_modifier = EaC_underground_railroad_activity
		add_modifier = { modifier = "EaC_underground_railroad_expanded" days = -1 }
	}

	option = {
		name = EaC_civic_mechanic_events.200.a
		tooltip = {
			add_modifier = { modifier = "EaC_underground_railroad_expanded" days = -1 }
		}
	}
}

# Drug Related Deaths
planet_event = {
	id = EaC_civic_mechanic_events.3201
	title = EaC_civic_mechanic_events.201.name
	desc = EaC_civic_mechanic_events.201.desc
	picture = GFX_evt_disease_outbreak
	show_sound = event_life_support_fail
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_expanded
		pop_amount > 400
	}


	immediate = {
		if = {
			limit = { any_playable_country = { has_policy_flag = refugees_allowed } } # If refugees_allowed country exists
			random_playable_country = {
				limit = { has_policy_flag = refugees_allowed }
				random_owned_planet = {
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
					resettle_pop = { pop = root.random_owned_pop_group planet = this }
				}
				# An event then fires notifying the country who got the pops
			}
		}
		else = {
			random_owned_pop_group = { kill_single_pop = yes }
			random_owned_pop_group = { kill_single_pop = yes }
			random_owned_pop_group = { kill_single_pop = yes }
			random_owned_pop_group = { kill_single_pop = yes }
		}
	}

	option = {
		name = WORRYING
		custom_tooltip = EaC_civic_mechanic_events.201.tooltip
	}
}

# Drug Cartels Clash
planet_event = {
	id = EaC_civic_mechanic_events.3202
	title = EaC_civic_mechanic_events.202.name
	desc = EaC_civic_mechanic_events.202.desc
	picture = GFX_evt_derelict_interior
	show_sound = event_ground_battle
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_expanded
	}

	immediate = {
		add_modifier = { modifier = "EaC_slave_resistance" years = 10 }
		set_timed_planet_flag = {
			flag = EaC_planet_general_strike_flag
			years = 10
		}
	}

	option = {
		name = EaC_civic_mechanic_events.203.a
		tooltip = {
			add_modifier = { modifier = "EaC_slave_resistance" years = 10 }
		}
	}
}

# Drug Smuggler Crash
planet_event = {
	id = EaC_civic_mechanic_events.3203
	title = EaC_civic_mechanic_events.203.name
	desc = EaC_civic_mechanic_events.203.desc
	picture = GFX_evt_nuclear_explosion
	show_sound = event_super_explosion
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_expanded
	}

	immediate = {
		random_owned_pop_group = { kill_single_pop = yes }
		random_owned_pop_group = { kill_single_pop = yes }
		random_owned_pop_group = { kill_single_pop = yes }
		add_planet_devastation = 15
	}

	option = {
		name = EaC_civic_mechanic_events.203.a
		custom_tooltip = EaC_civic_mechanic_events.103.tooltip
		tooltip = { add_planet_devastation = 15 }
	}
}

# Drug Trade Continues
planet_event = {
	id = EaC_civic_mechanic_events.3204
	title = EaC_civic_mechanic_events.204.name
	desc = EaC_civic_mechanic_events.204.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_underground_railroad_expanded
		owner = {
			has_country_resource = { type = exotic_gases amount > 10 }
		}
	}

	immediate = {
		owner = {
			add_resource = { exotic_gases = -10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.204.a
		tooltip = {
			owner = {
				add_resource = { exotic_gases = -10 }
			}
		}
	}
}

# Mob Rule
planet_event = {
	id = EaC_civic_mechanic_events.3300
	title = EaC_civic_mechanic_events.300.name
	desc = EaC_civic_mechanic_events.300.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_labor_movements
		NOT = { has_modifier = EaC_worker_commune }
	}

	immediate = {
		remove_modifier = EaC_labor_movements
		add_modifier = { modifier = "EaC_worker_commune" days = -1 }	# mob_rule replaced with --> EaC_worker_commune
	}

	option = {
		name = EaC_civic_mechanic_events.300.a
		tooltip = {
			remove_modifier = EaC_labor_movements
			add_modifier = { modifier = "EaC_worker_commune" days = -1 }
		}
	}
}

# Protection Racket
planet_event = {
	id = EaC_civic_mechanic_events.3301
	title = EaC_civic_mechanic_events.301.name
	desc = EaC_civic_mechanic_events.301.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_worker_commune
	}

	immediate = {
		add_modifier = { modifier = "EaC_labor_propaganda" years = 10 }	# protection_racket changed to --> EaC_labor_propaganda
		set_timed_planet_flag = {
			flag = EaC_planet_general_strike_flag
			years = 10
		}
	}

	option = {
		name = EaC_civic_mechanic_events.301.a
		tooltip = {
			add_modifier = { modifier = "EaC_labor_propaganda" years = 10 }
		}
	}
}

# Corrupt Administration
planet_event = {
	id = EaC_civic_mechanic_events.3302
	title = EaC_civic_mechanic_events.302.name
	desc = EaC_civic_mechanic_events.302.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_worker_commune
	}

	immediate = {
		add_modifier = { modifier = "EaC_administration_strikes" years = 10 }		# corrupt_administration changed to --> EaC_administration_strikes
		set_timed_planet_flag = {
			flag = EaC_planet_general_strike_flag
			years = 10
		}
	}

	option = {
		name = EaC_civic_mechanic_events.302.a
		tooltip = {
			add_modifier = { modifier = "EaC_administration_strikes" years = 10 }
		}
	}
}

# Gangsters Assassinate Governor
planet_event = {
	id = EaC_civic_mechanic_events.3303
	title = EaC_civic_mechanic_events.303.name
	desc = EaC_civic_mechanic_events.303.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_worker_commune
		exists = leader
	}

	immediate = {
		leader = { save_event_target_as = governor_target }

		owner = { set_country_flag = EaC_worker_commune_killed_governor }	# gangsters_killed_governor changed to --> EaC_worker_commune_killed_governor
	}

	option = {
		name = EaC_civic_mechanic_events.303.a
		leader = { kill_leader = { show_notification = no } }
	}
}

# Gangsters Take Control of Trade
planet_event = {
	id = EaC_civic_mechanic_events.3304
	title = EaC_civic_mechanic_events.304.name
	desc = EaC_civic_mechanic_events.304.desc
	picture = GFX_evt_ship_offloading_cargo
	show_sound = event_criminal_activity
	location = root
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		has_modifier = EaC_worker_commune
	}

	immediate = {
		add_modifier = { modifier = "EaC_worker_commune_means_of_production" years = 10 }			# trade_pilfering changed to --> EaC_worker_commune_means_of_production
		set_timed_planet_flag = {
			flag = EaC_planet_general_strike_flag
			years = 10
		}
	}

	option = {
		name = EaC_civic_mechanic_events.40.a
		tooltip = {
			add_modifier = { modifier = "EaC_worker_commune_means_of_production" years = 10 }
		}
	}
}

# Criminal Branch Office Closes
event = {
	id = EaC_civic_mechanic_events.31000
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_playable_country = {
			any_owned_planet = {
				has_branch_office = yes
				branch_office_owner = {
					is_criminal_syndicate = yes
					NOT = { has_country_flag = criminal_branch_closed_cooldown }
				}
				planet_crime < 1
			}
		}
	}

	immediate = {
		random_list = {
			19 = {}
			1 = {
				random_playable_country = {
					limit = {
						any_owned_planet = {
							has_branch_office = yes
							branch_office_owner = {
								is_criminal_syndicate = yes
								NOT = { has_country_flag = criminal_branch_closed_cooldown }
							}
							planet_crime < 1
						}
					}
					random_owned_planet = {
						limit = {
							has_branch_office = yes
							branch_office_owner = {
								is_criminal_syndicate = yes
								NOT = { has_country_flag = criminal_branch_closed_cooldown }
							}
							planet_crime < 1
						}
						branch_office_owner = { save_event_target_as = office_owner }
						planet_event = { id = EaC_civic_mechanic_events.31001 days = 360 random = 40 }
					}
				}
			}
		}
	}
}

# Criminal Branch Office Closes (Planet Owner)
planet_event = {
	id = EaC_civic_mechanic_events.31001
	title = EaC_civic_mechanic_events.1001.name
	desc = EaC_civic_mechanic_events.1001.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = root

	is_triggered_only = yes

	trigger = {
		planet_crime < 1
		has_branch_office = yes
		branch_office_owner = {
			is_criminal_syndicate = yes
			NOT = { has_country_flag = criminal_branch_closed_cooldown }
		}
	}

	immediate = {
		# 10 year cooldown
		branch_office_owner = {
			set_timed_country_flag = { flag = criminal_branch_closed_cooldown years = 10 }
		}
	}

	option = {
		name = EaC_civic_mechanic_events.1001.a
		close_branch_office = yes
		hidden_effect = {
			set_timed_planet_flag = { flag = criminal_branch_closed_cooldown_planet@event_target:office_owner days = 3600 }
			 event_target:office_owner = {
				country_event = { id = EaC_civic_mechanic_events.31002 }
			}
		}
	}
}

# Criminal Branch Office Closes (Office Owner)
country_event = {
	id = EaC_civic_mechanic_events.31002
	title = EaC_civic_mechanic_events.1002.name
	desc = EaC_civic_mechanic_events.1002.desc
	picture = GFX_evt_dark_alley
	show_sound = event_criminal_activity
	location = from

	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		custom_tooltip = EaC_civic_mechanic_events.1002.tooltip
	}
}

#####################################################################################################

#####################################################################################################
# Pop Abducted
pop_group_event = {
	id = action.121
	title = OK
	desc = OK

	hide_window = yes
	is_triggered_only = yes

	trigger = { 
		from = { 
			NOT = { 
				has_orbital_bombardment_stance = EaC_liberate_slaves 
				has_planet_flag = recently_raided	#So that you will not have multiples of the same notification pending
			} 
		} 
	}

	immediate = {
		from = {
			set_timed_planet_flag = {
				flag = recently_raided
				months = 6
			}
		}
		create_message = {
			type = MESSAGE_TYPE_POP_ABDUCTED
			localization = MESSAGE_POP_ABDUCTED
			days = 30
			target = from
			variable = {
				type = name
				localization = SPECIES
				scope = root.species
			}
			variable = {
				type = name
				localization = TARGET_PLANET
				scope = root.planet
			}
			variable = {
				type = name
				localization = PLANET
				scope = from
			}
		}
		if = {
			limit = {
				exists = from.owner
			}
			from.owner = {
				create_message = {
					type = MESSAGE_TYPE_POP_ABDUCTED_FROM_US
					localization = MESSAGE_POP_ABDUCTED_FROM_US
					days = 30
					target = from
					variable = {
						type = name
						localization = SPECIES
						scope = root.species
					}
					variable = {
						type = name
						localization = ABDUCTER
						scope = root.planet.owner
					}
					variable = {
						type = name
						localization = PLANET
						scope = from
					}
				}
			}
		}
	}
}

# Last Primitive Pop Abducted (HIDDEN)
#pop_group_event = {	Steam: No need to overwrite vanilla events if we don't change them
#	id = action.122
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		from = { pop_amount = 0 }
#	}
#
#	immediate = {
#		from = {
#			if = {
#				limit = { has_observation_outpost = yes }
#				observation_outpost = {
#					owner = {
#						save_event_target_as = obsv_post_owner
#						country_event = { id = action.123 }
#					}
#					dismantle = yes
#				}
#			}
#		}
#		owner = {
#			if = {
#				limit = {
#					NAND = {
#						exists = event_target:obsv_post_owner
#						is_same_value = event_target:obsv_post_owner
#					}
#				}
#				save_event_target_as = abductor
#				country_event = { id = action.123 }
#			}
#		}
#		from = {
#			solar_system = {
#				if = {
#					limit = { exists = space_owner }
#					space_owner = {
#						if = {
#							limit = {
#								NOT = { is_same_value = event_target:abductor }
#								NAND = {
#									exists = event_target:obsv_post_owner
#									is_same_value = event_target:obsv_post_owner
#								}
#							}
#							country_event = { id = action.123 }
#						}
#					}
#				}
#			}
#		}
#	}
#}

# Last Primitive Pop Abducted
#country_event = {	Steam: We don't even change this, why keep it?
#	id = action.123
#	title = "action.123.name"
#	desc = "action.123.desc"
#	picture = GFX_evt_surrender
#	show_sound = event_screams
#	location = fromfrom
#
#	is_triggered_only = yes
#
#	option = {
#		trigger = {
#			NOT = {
#				from = {
#					is_owned_by = root
#				}
#			}
#		}
#		name = DISCONCERTING
#	}
#	option = {
#		trigger = {
#			from = {
#				is_owned_by = root
#			}
#		}
#		name = action.123.a
#	}
#}
###################################################################
# Pop Abducted
pop_group_event = {
	id = EaC_civic_mechanic_events.4121
	title = OK
	desc = OK

	hide_window = yes
	is_triggered_only = yes

	trigger = { 
		from = { 
			has_orbital_bombardment_stance = EaC_liberate_slaves 
			NOT = {  has_planet_flag = recently_raided }	#So that you will not have multiples of the same notification pending
		} 
	}

	immediate = {
		from = {
			set_timed_planet_flag = {
				flag = recently_raided
				months = 6
			}
		}
		create_message = {
			type = EaC_MESSAGE_TYPE_POP_ABDUCTED
			localization = EaC_MESSAGE_POP_ABDUCTED
			days = 30
			target = from
			variable = {
				type = name
				localization = SPECIES
				scope = root.species
			}
			variable = {
				type = name
				localization = TARGET_PLANET
				scope = root.planet
			}
			variable = {
				type = name
				localization = PLANET
				scope = from
			}
		}
		if = {
			limit = {
				exists = from.owner
			}
			from.owner = {
				create_message = {
					type = EaC_MESSAGE_TYPE_POP_ABDUCTED_FROM_US
					localization = EaC_MESSAGE_POP_ABDUCTED_FROM_US
					days = 30
					target = from
					variable = {
						type = name
						localization = SPECIES
						scope = root.species
					}
					variable = {
						type = name
						localization = ABDUCTER
						scope = root.planet.owner
					}
					variable = {
						type = name
						localization = PLANET
						scope = from
					}
				}
			}
		}
	}
}

# Last Primitive Pop Abducted (HIDDEN)
pop_group_event = {
	id = EaC_civic_mechanic_events.4122
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = { pop_amount = 0 }
	}

	immediate = {
		from = {
			if = {
				limit = { has_observation_outpost = yes }
				observation_outpost = {
					owner = {
						save_event_target_as = obsv_post_owner
						country_event = { id = EaC_civic_mechanic_events.4123 }
					}
					dismantle = yes
				}
			}
		}
		owner = {
			if = {
				limit = {
					NAND = {
						exists = event_target:obsv_post_owner
						is_same_value = event_target:obsv_post_owner
					}
				}
				save_event_target_as = abductor
				country_event = { id = EaC_civic_mechanic_events.4123 }
			}
		}
		from = {
			solar_system = {
				if = {
					limit = { exists = space_owner }
					space_owner = {
						if = {
							limit = {
								NOT = { is_same_value = event_target:abductor }
								NAND = {
									exists = event_target:obsv_post_owner
									is_same_value = event_target:obsv_post_owner
								}
							}
							country_event = { id = EaC_civic_mechanic_events.4123 }
						}
					}
				}
			}
		}
	}
}

# Last Primitive Pop Abducted
country_event = {
	id = EaC_civic_mechanic_events.4123
	title = "EaC_civic_mechanic_events.4123.name"
	desc = "EaC_civic_mechanic_events.4123.desc"
	picture = GFX_evt_surrender
	show_sound = event_screams
	location = fromfrom

	is_triggered_only = yes

	option = {
		trigger = {
			NOT = {
				from = {
					is_owned_by = root
				}
			}
		}
		name = DISCONCERTING
	}
	option = {
		trigger = {
			from = {
				is_owned_by = root
			}
		}
		name = EaC_civic_mechanic_events.4123.a
	}
}

############################
#
# Resort World Civilian Cruise
#
############################
# Resort World Cruise enters orbit
fleet_event = {
	id = EaC_civic_mechanic_events.5001
	hide_window = yes

	is_triggered_only = yes
	
	trigger = { 
		is_ship_size = civilian_resort_colony_cruise
		FROM = { 
			is_colony = yes
			NOT = { has_modifier = resort_colony } 
			is_owned_by = root.owner
		}
	}

	immediate = {
		FROM = {
			add_modifier = {
				modifier = resort_colony_branch
				days = -1
				clear_on_owner_change = yes
			}
			if = {
				limit = { NOT = { has_modifier = planet_luxuries_boost } }
				add_modifier = { modifier = "planet_luxuries_boost" days = 720 }
			}
		}
	}
}

# Check for Systems without Resort Ships (clean-up)
country_event = {
	id = EaC_civic_mechanic_events.5002
	hide_window = yes

	is_triggered_only = yes
	
	trigger = { 
		any_planet_within_border = { has_modifier = resort_colony_branch } 
	}

	immediate = {
		every_system_within_border = {
			limit = { 
				any_system_planet = { has_modifier = resort_colony_branch }
			}
			if = {
				limit = {
					count_fleet_in_system = {
						count = 0
						limit = { is_ship_size = civilian_resort_colony_cruise }
					}
				}
				random_system_planet = {
					limit = { has_modifier = resort_colony_branch }
					remove_modifier = resort_colony_branch
				}
			}
			else_if = {
				limit = { 
					any_system_planet = { 
						has_modifier = resort_colony_branch 
						has_modifier = resort_colony		#Has Both
					}
				}
				random_system_planet = {
					limit = { 
						has_modifier = resort_colony_branch 
						has_modifier = resort_colony	
					}
					remove_modifier = resort_colony_branch
				}
			}
		}
		if= {
			limit = { has_edict = civilian_resort_colony_cruise_roam_edict }
			random_planet_within_border = {
				limit = { 
					count_fleet_in_orbit = {
						count > 0
						limit = { is_ship_size = civilian_resort_colony_cruise }
					}
				}
				every_fleet_in_orbit = { 
					limit = { is_ship_size = civilian_resort_colony_cruise }
					fleet_event = { id = EaC_civic_mechanic_events.5003 }
				}
			}
		}
	}
}

# Resort World Cruise Travels Randomly
fleet_event = {
	id = EaC_civic_mechanic_events.5003
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		owner = {
			random_planet_within_border = {
				limit = { 
					NOT = { is_same_value = root.orbit }
					distance = {
						source = root
						same_solar_system = yes
					}
				}
				weights = {
					base = 1
					modifier = { 
						add = 100
						is_colony = yes 
						NOT = { has_modifier = planet_luxuries_boost }
					}
				}
				root = { auto_move_to_planet = { target = PREV clear_auto_move_on_arrival = yes } }
			}
		}
	}
}
